<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/www/www.gentoo.org/raw_cvs/gentoo/xml/htdocs/doc/en/cross-compiling-distcc.xml,v 1.3 2006/01/25 08:56:36 neysx Exp $ -->

<guide link="/doc/en/cross-compiling-distcc.xml">
<title>DistCC Cross-compiling Guide</title>

<author title="Autor">
  <mail link="agaffney@gentoo.org">Andrew Gaffney</mail>
</author>
<author title="Redaktor">
  <mail link="jackdark@gmail.com">Joshua Saddler</mail>
</author>
<author title="Tłumacz">
  <mail link="prizman@o2.pl">Artur Czepiel</mail>
</author>

<abstract>
Ten artykuł ukazuje w jaki sposób ustawić distcc do kompilacji skrośnej pomiedzy
różnymi architekturami

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.2</version>
<date>2006-01-25</date>

<chapter>
<title>Kompilacja skrośna z distcc</title>
<section>
<title>Wstęp</title>
<body>

<p>
<c>distcc</c> jest narzędziem, które pozwala podzielić kompilacje pomiędzy
komputery połączone w sieć. Dopóki te komputery używają tego samego toolchaina,
oraz pracują na tej samej architekturze, nie jest wymagana specjalna
konfiguracja <c>distcc</c>. Ale co zrobić, gdy w sieci znajdują się całkowicie
rózne komputery? Ten poradnik pomoże skonfigurować użytkownikowi <c>distcc</c>
tak aby umożliwiało współprace pomiędzy róznymi architekturami.
</p>

</body>
</section>
<section>
<title>Instalacja potrzebnych narzędzi</title>
<body>

<p>
Po pierwsze musimy zainstalować pakiet <c>crossdev</c> na wszystkich komputerach
które będą wykorzystywane w procesie kompilacji. <c>crossdev</c> jest
narzędziem, które ułatwia kompilację na róznych architekturach jednocześnie. W
oryginale napisany został przez <mail link="kumba@gentoo.org">Joshua
Kinard</mail> i przepisany od podstaw przez <mail link="vapier@gentoo.org">Mike
Frysinger</mail>. Jego uzycie jest proste: <c>crossdev -t sparc</c> zbuduje
pełny cross-toolchain nakierunkowany na architekture Sparc. W skład toolchaina
wchodzą: binutils, gcc, glibc, oraz linux-headers. Jeżeli potrzebujemy pomocy,
możemy wpisać <c>crossdev --help</c>. Najprawdopodobniej zajdzie potrzeba
instlacji odpowiednich cross-toolchainow na wszystkich komputerach pomagających
w kompilacji
</p>

<p>
Następnie trzeba zainstalować<c>distcc</c> na wszystkich komputerach, które
zostaną użyte w procesie kompilacji. Czyli komputer na którym będzie działać
emerge oraz na wszystkich z kompilacją skrośną. Po więcej infomracji na temat
używania i konfiguracji<c>distcc</c> należy
zajrzeć do <urilink="/doc/en/distcc.xml">Dokmentacji Distcc w Gentoo</uri>.
</p>

</body>
</section>
<section>
<title>Specyficzne informacje dla róznych architektur</title>
<body>

<p>
Jeżeli kompilujemy skrośnie pomiędzy podarchitekturami x86 (np. i586 and i686),
ciągle musimy zbudować pełny cross-toolchain dla odpowiednich ustawień CHOST, w
przciwnym wypadku kompilacja nie powiedzie się. Dzieje się tak ponieważ i586 i i686
są aktualnie innymi ustawieniami CHOST, pomimo faktu przynależenia do x86.
Najlepiej więc o tym pamiętać podczas budowania cross-toolchainów. Dla
przykładu, jeżeli celem jest komputer i586, oznacza to iż musimy zbudować
cross-toolchain dla i586 na naszym i686 który będzie pomagał w kompilacji.
</p>

</body>
</section>
<section>
<title>Konfiguracja distcc do poprawnej kompilacji skrośnej</title>
<body>

<p>
Przy domyślnych ustawieniach distcc kompilacja skrośna <e>nie</e> będzie działać
poprawnie. Problemem jest to, iż wiele programów podczas budowania będzie
wywoływać <c>gcc</c> zamiast pełnej nazwy kompilatora (np.
<c>sparc-unknown-linux-gnu-gcc</c>). W momencie gdy kompilacja jest rozpraszana
do komputerów pomagających w kompilacji, zostanie wywołany lokalny kompilator
zamiast nowego skrośnego kompilatora.
</p>

<p>
Na szczęście, jest rozwiązanie dla tego małego problemu. Wszystko co potrzebne
to 'wrapper script' oraz kilka dowiązań symbolicznych na komputerze na którym
uruchomimy <c>emerge</c>. Użyjemy tu architektury Sparc jako przykładu.
Gdziekolwiek poniżej ujżymy <c>sparc-unknown-linux-gnu</c>, będzie to oznaczać
iż powinniśmy tam wstawić naszą zmienną CHOST (np. <c>x86_64-pc-linux-gnu</c>
dla AMD64). Kiedy pierwszy raz zainstalujemy distcc, folder
<path>/usr/lib/distcc/bin</path> powinien wyglądać mniej więcej tak:
</p>

<note>
Poniższe instrukcje są przygotowane tylko dla komputera na którym uruchomimy
emerge. Nie należy wykonywać ich na komputerach które wspomagają kompilację.
</note>

<pre caption="Dostępne kompilatory">
# <i>cd /usr/lib/distcc/bin</i>
# <i>ls -l</i>
total 0
lrwxrwxrwx  1 root root 15 Dec 23 20:13 c++ -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 cc -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 g++ -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 gcc -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 sparc-unknown-linux-gnu-c++ -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 sparc-unknown-linux-gnu-g++ -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Dec 23 20:13 sparc-unknown-linux-gnu-gcc -&gt; /usr/bin/distcc
</pre>

<p>
Oto co powinniśmy zrobić:
</p>

<pre caption="Modyfikowanie distcc">
# <i>rm c++ g++ gcc cc</i>
</pre>

<p>
Następnie zrobimy nowy skrypt. Otwórzmy zatem nasz ulubiony edytor i stwórzmy
plik <path>sparc-unknown-linux-gnu-wrapper</path> do którego wstawimy poniższych
kilka linijek. Pamiętając o zmianie ustawień CHOST (w tym wypadku,
<c>sparc-unknown-linux-gnu</c>) na ustawienie z komputera na którym uruchomimy
emerge.
</p>

<pre caption="Nowy `wrapper script`">
#!/bin/bash
exec /usr/lib/distcc/bin/sparc-unknown-linux-gnu-g${0:$[-2]} "$@"
</pre>

<p>
Następnie nadamy mu atrybut wykonywalności i utworzymy odpowiednie dowiązania
symboliczne:
</p>

<pre caption="Tworzenie dowiązań symbolicznych">
# <i>chmod a+x sparc-unknown-linux-gnu-wrapper</i>
# <i>ln -s sparc-unknown-linux-gnu-wrapper cc</i>
# <i>ln -s sparc-unknown-linux-gnu-wrapper gcc</i>
# <i>ln -s sparc-unknown-linux-gnu-wrapper g++</i>
# <i>ln -s sparc-unknown-linux-gnu-wrapper c++</i>
</pre>

<p>
Gdy skończymy, <path>/usr/lib/distcc/bin</path> powinno wyglądać tak:
</p>

<pre caption="Ustawienie właściwych kompilatorów">
# <i>ls -l</i>
total 4
lrwxrwxrwx  1 root root 25 Jan 18 14:20 c++ -&gt; sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 25 Jan 18 14:20 cc -&gt; sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 25 Jan 18 14:20 g++ -&gt; sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 25 Jan 18 14:20 gcc -&gt; sparc-unknown-linux-gnu-wrapper
lrwxrwxrwx  1 root root 15 Nov 21 10:42 sparc-unknown-linux-gnu-c++ -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Nov 21 10:42 sparc-unknown-linux-gnu-g++ -&gt; /usr/bin/distcc
lrwxrwxrwx  1 root root 15 Jul 27 10:52 sparc-unknown-linux-gnu-gcc -&gt; /usr/bin/distcc
-rwxr-xr-x  1 root root 70 Jan 18 14:20 sparc-unknown-linux-gnu-wrapper
</pre>

<p>
Gratulacje! Właśnie poprawnie skonfigurowaliśmy cross-distcc.
</p>

</body>
</section>
<section>
<title>Jak to działa?</title>
<body>

<p>
W momencie wywołania, <c>distcc</c> sprawdza przez co zostało wywołane (np.
<c>i686-pc-linux-gnu-gcc</c>, <c>sparc-unknown-linux-gnu-g++</c>, itd.) i wysyła
odpowiednie informacje do komputera który pomaga w kompilacji (m.in nazwe
kompilatora). Deamon distcc na innym pomagającym komputerze wywołuje
binarke o takiej samej nazwie. Jeżeli otrzyma informacje o <c>gcc</c>, uruchomi
<c>gcc</c>, które z reguły jest natywnym kompilatorem na pomagającym komputerze
i najprawdopodobniej nie będzie działać dobrze jeżeli nie jest to ta sama
architektura co na komputerze wywołującym <c>emerge</c>. Nie powinno byś
natomiast żadnych problemów kiedy zostanie przesłana <e>pełna</e> nazwa
kompilatora (np. <c>sparc-unknown-linux-gnu-gcc</c>).
</p>

</body>
</section>
</chapter>
</guide>
