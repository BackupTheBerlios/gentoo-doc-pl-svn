.TH "EBUILD" "5" "Dec 2005" "Portage 2.1" "portage"
.SH "NAZWA"
ebuild \- format, zmienne i funkcje skryptów ebuild
.SH "OPIS"
Program
.BR ebuild (1)
przyjmuje pojedynczy skrypt ebuild jako argument. Skrypt ten zawiera zmienne i
polecenia, które określają w jaki sposób należy pobrać, rozpakować, poprawić,
skompilować, zainstalować i osadzić w systemie dany pakiet oprogramowania,
używając jego oryginalnych źródeł. Dodatkowo, skrypt może w razie potrzeby
zawierać polecenia wykonywane przed/po procesach instalacji/deinstalacji.
.SH "PRZYKŁAD"
Oto przykładowy prosty skrypt ebuild:

.DS
.nf
# Copyright 1999\-2005 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: $

inherit some_eclass another_eclass

DESCRIPTION="Super\-useful stream editor (sed)"
HOMEPAGE="http://www.gnu.org/software/sed/sed.html"
SRC_URI="ftp://alpha.gnu.org/pub/gnu/sed/${P}.tar.gz"

LICENSE="GPL\-2"
SLOT="0"
KEYWORDS="~x86"
IUSE=""

DEPEND="virtual/libc"
RDEPEND="virtual/libc"

src_compile() {
	econf || die "could not configure"
	emake || die "emake failed"
}

src_install() {
	into /usr
	doinfo doc/sed.info
	doman doc/sed.1
	into /
	dobin sed/sed || die "dobin sed failed"
	dodir /usr/bin
	dosym /bin/sed /usr/bin/sed
	dodoc NEWS README* THANKS TODO AUTHORS BUGS ANNOUNCE
}
.fi
.SH "ZMIENNE"
.TP
.B UWAGI NT. UŻYTKOWANIA
- Zmienne PORTAGE* i PORTDIR* można znaleźć w pliku \fBmake.conf\fR(5).
.br
- Przypisując w skryptach ebuild wartości do zmiennych \fBnie wolno stawiać
spacji\fR pomiędzy nazwą zmiennej a znakiem równości.
.TP
.B P
Zmienna ta zawiera nazwę pakietu bez numeru rewizji ebuilda.
Nie wolno jej NIGDY modyfikować.
.br
\fBxfree-4.2.1-r2.ebuild\fR --> \fB$P\fR=='\fIxfree-4.2.1\fR'
.TP
.B PN
Zawiera nazwę skryptu bez numeru wersji.
.br
\fBxfree-4.2.1-r2.ebuild\fR --> \fB$PN\fR=='\fIxfree\fR'
.TP
.B PV
Zawiera numer wersji bez numeru rewizji.
.br
\fBxfree-4.2.1-r2.ebuild\fR --> \fB$PV\fR=='\fI4.2.1\fR'
.TP
.B PR
Zawiera numer rewizji lub 'r0', jeśli numer rewizji nie istnieje.
.br
\fBxfree-4.2.1-r2.ebuild\fR --> \fB$PR\fR=='\fIr2\fR'
.TP
.B PVR
Zawiera numer wersji oraz numer rewizji.
.br
\fBxfree-4.2.1-r2.ebuild\fR --> \fB$PVR\fR=='\fI4.2.1-r2\fR'
.TP
.B PF
Zawiera pełną nazwę pakietu \fI[PN]\-[PVR]\fR
.br
\fBxfree-4.2.1-r2.ebuild\fR --> \fB$PF\fR=='\fIxfree-4.2.1-r2\fR'
.TP
.B A
Zawiera wszystkie pliki źródłowe, których wymaga pakiet. Nigdy nie należy
definiować tej zmiennej. Jest ona automatycznie generowana ze zmiennych
\fISRC_URI\fR.
.TP
\fBWORKDIR\fR = \fI"${PORTAGE_TMPDIR}/portage/${PF}/work"\fR
Zawiera ścieżkę do głównego katalogu, w którym będzie budowany pakiet. Nie
należy modyfikować tej zmiennej.
.TP
\fBFILESDIR\fR = \fI"${PORTDIR}/${CATEGORY}/${PN}/files"\fR
Zawiera ścieżkę do podkatalogu 'files' z katalogu pakietu w drzewie portage. Nie
należy modyfikować tej zmiennej.
.TP
\fBS\fR = \fI"${WORKDIR}/${P}"\fR Zawiera ścieżkę do tymczasowego \fIkatalogu
budowania\fR. Ze zmiennej tej korzystają funkcje \fIsrc_compile\fR i
\fIsrc_install\fR. Dla obu tych funkcji ścieżka ze zmiennej \fIS\fR jest
katalogiem roboczym. Zmienną tę można zmodyfikować, umieszczając w niej ścieżkę
do katalogu, do którego zostało rozpakowane archiwum pakietu.
.TP
\fBT\fR = \fI"${PORTAGE_TMPDIR}/portage/${PF}/temp"\fR
Zawiera ściezkę do \fIkatalogu tymczasowego\fR. Zmiennej tej możemy używać
zgodnie z upodobaniami.
.TP
\fBD\fR = \fI"${PORTAGE_TMPDIR}/portage/${PF}/image"\fR
Zawiera ścieżkę do tymczasowego \fIkatalogu instalacji\fR. Każda operacja
zapisu, która nie wykorzystuje pomocniczych narzędzi i funkcji (opisanych
poniżej), powinna być poprzedzona zmienną ${D}. Nie należy modyfikować tej
zmiennej.
.TP
\fBDESCRIPTION\fR = \fI"Niezmiernie pożyteczny pakiet"\fR
Zmienna ta powinna zawierać krótki opis pakietu.
.TP
\fBSRC_URI\fR = \fI"http://pozyteczny.com/pakiet/${P}.tar.gz"\fR
Zawiera listę odnośników URI wymaganych plików źródłowych. Może zawierać wiele
odnośników dla pojedynczego pliku. Jeśli plik nie zostanie znaleziony w
\fIGENTOO_MIRROR\fB\fR, zostanie wybrana najszybsza lokacja.
.TP
\fBHOMEPAGE\fR = \fI"http://happy.com/"\fR
Powinna zawierać listę odnośników URL do strony głównej pakietu oraz innych
źródeł informacji na jego temat.
.TP
\fBKEYWORDS\fR = \fI[-~][x86,ppc,sparc,mips,alpha,arm,hppa]\fR 
Zmienna ta powinna zawierać listę architektur, o których wiemy, że ebuild na
nich zadziała/nie zadziała. Zwykle jeśli nie jesteśmy pewni co do architektury,
nie dodajemy jej do zmiennej. Jeśli ebuild nie zadziała na danej architekturze,
należy dodać ją poprzedzoną znakiem \-, na przykład \-ppc. Jeśli planujemy
dodać ebuild do drzewa Portage, powinniśmy podać ~arch dla tych architektur,
dla których ebuild NA PEWNO DZIAŁA. (Pakiety, które mają w ten sposób ustawiony
KEYWORD można odmaskować, ustawiając zmienną ACCEPT_KEYWORDS="~arch" w wierszu
poleceń lub w pliku \fBmake.conf\fR(5)). Miarodajną listę architektur
znajdziemy w pliku /usr/portage/profiles/arch.list.
.TP
\fBSLOT\fR
Za pomocą tej zmiennej ustawiamy wartość SLOT dla pakietów, które być może będą
musiały współistnieć. Domyślnie powinniśmy ustawić \fBSLOT\fR="0", chyba że
mamy poważne powody, by uczynić inaczej. Zmienna ta \fIZAWSZE\fR powinna zostać
ustawiona.
.TP
\fBLICENSE\fR
W tej zmiennej powinniśmy umieścić rozdzieloną spacjami listę licencji, na
których wydany jest pakiet. Ustawiane licencje \fB_muszą_\fR odpowiadać tym z
katalogu /usr/portage/licenses/. Jeśli danej licencji nie ma jeszcze w Portage,
najpierw należy ją tam dodać.
.TP
\fBIUSE\fR
Zmienna ta powinna zawierać listę wszelkich flag USE, z których korzysta nasz
skrypt. Możemy tu pominąć jedynie flagi właściwe dla architektury (patrz
\fBKEYWORDS\fR).
.TP
\fBDEPEND\fR
Zmienna ta powinna zawierać listę wszystkich pakietów, które muszą być już
zainstalowane, aby nasz pakiet dał się skompilować.
.RS
.TP
.B Atomy DEPEND
Atom depend to po prostu zależność, której Portage używa przy obliczaniu
powiązań między pakietami. Należy zauważyć, że jeśli dany atom nie został
jeszcze zainstalowany, dopasowywana jest ostatnia dostępna wersja.
.RS
.TP
.B Pełna postać atomów
Atom w pełnej postaci FIXME to po prostu kompletna specyfikacja
kategoria/nazwapakietu. Oto przykładowe atomy w pełnej postaci:

.nf
.I sys-apps/sed
.I sys-libs/zlib
.I net-misc/dhcp
.fi
.TP
.B Wersje atomów
Czasem możemy potrzebować określić precyzyjnie jakie wersje atomów są nam
potrzebne. Należy jedynie zwrócić uwagę, że numery wersji muszą być łączone
przedrostkiem (patrz niżej). Dlatego numery wersji dodajemy jako przyrostek do
reszty:

.nf
sys-apps/sed\fI-4.0.5\fR
sys-libs/zlib\fI-1.1.4-r1\fR
net-misc/dhcp\fI-3.0_p2\fR
.fi

Numer wersji zwykle składa się z dwóch lub trzech liczb, oddzielonych kropkami,
na przykład 1.2 lub 4.5.2. Ten ciąg znaków może być czasem zakończony literą, na
przykład 1.2a lub 4.5.2z. Należy zwrócić uwagę, że znak ten \fBnie ma\fR
oznaczać statusu alpha, beta, itd... Do tego służą osobne przyrostki: _alpha,
_beta, _pre (FIXME pre-release), _rc (FIXME release canditate) lub _p (patch).
Czyli dla trzeciej wersji FIXME pre-release pakietu napisalibyśmy na przykład
1.2_pre3. 
.TP
.B Operatory przedrostkowe atomów [> >= = <= <]
Czasem możemy potrzebować określić zależność od ogólnych zakresów wersji
pakietów, zamiast podawać za każdym razem konkretną wersję. Do tego celu służą
standardowe operatory Boole'a:

.nf
\fI>\fRmedia-libs/libgd-1.6
\fI>=\fRmedia-libs/libgd-1.6
\fI=\fRmedia-libs/libgd-1.6
\fI<=\fRmedia-libs/libgd-1.6
\fI<\fRmedia-libs/libgd-1.6
.fi
.TP
.B Rozszerzone przedrostki [!~] i przyrostki [*] atomów
Na tym nie koniec funkcjonalności. W razie potrzebny możemy zdefiniować pakiety
blokujące oraz określić zakres interesujących nas wersji pakietów. Należy też
zwrócić uwagę, że te rozszerzone przyroski i przedrostki można dowolnie łączyć z
klasami atomów, opisanymi wyżej. Oto kilka typowych przykładów z drzewa Portage:

.nf
\fI!\fRapp-text/dos2unix
=dev-libs/glib-2\fI*\fR
\fI!\fR=net-fs/samba-2\fI*\fR
\fI~\fRnet-libs/libnet-1.0.2a
.fi

\fI!\fR oznacza, że dany pakiet nie może być zainstalowany w tym samym czasie
.br
\fI*\fR oznacza, że interesuje nas zainstalowanie dowolnej wersji pakietu z
podaną podstawą. Tak więc w przypadku '2*' interesują nas wersje '2.1', '2.2',
'2.2.1' itd, natomiast nie jesteśmy zainteresowani wersjami '1.0', '3.0',
'4.1' itd.
.br
\fI~\fR oznacza, że interesuje nas dowolna rewizja podstawowej wersji podanego
pakietu. W powyższym przykładzie więc mogą to być wersje '1.0.2a', '1.0.2a-r1',
'1.0.2a-r2' itd.
.RE
.TP
.B Dynamiczne zależności FIXME (DEPENDs)
Czasem, zależnie od użytych flag USE, programy mogą posiadać zmienną listę
zależności. Portage daje nam kilka sposobów na poradzenie sobie z tą sytuacją.
Zauważmy tylko, że gdy używamy poniższych przykładów składni, każdy przypadek jest
traktowany jako jeden atom w kontekście, w którym się pojawia. Oznacza to, że
każdy atom warunkowo zarówno włącza wiele atomów, jak i może być zagnieżdżony w
nieskończoność. FIXME (co to w ogóle znaczy?)

Sometimes programs may depend on different things depending on the USE
variable.  Portage offers a few options to handle this.  Note that when
using the following syntaxes, each case is considered as 1 Atom in the
scope it appears.  That means that each Atom both conditionally include
multiple Atoms and be nested to an infinite depth.
.RS
.TP
.B usevar? ( atom DEPEND )
Aby dołączyć bibliotekę jpeg gdy użytkownik ustawił flagę jpeg w \fBUSE\fR,
należy użyć poniższej składni:
.br
.B jpeg? ( media-libs/jpeg )
.TP
.B !usevar? ( atom )
Jeśli chcemy dołączyć pakiet tylko wtedy, gdy użytkownik nie włączył określonej
flagi w zmiennej \fBUSE\fR, należy użyć poniższej składni:
.br
.B !nophysfs? ( dev-games/physfs )
.br
Często przydaje się to wtedy, gdy chcemy dodać opcjonalne, lecz domyślnie
włączone wsparcie dla jakiejś funkcji.
.TP
.B usevar? ( atom jeśli prawda ) !usevar? ( atom jeśli fałsz )
Obsługa funkcjonalności takiej jak operator trójargumentowy z języka C odbywa
się za pomocą dwóch wyrażeń, jednego zwykłego, drugiego odwróconego. Jeśli
pakiet korzysta z GTK1 lub GTK2, ale nie obu na raz, możemy obsłużyć to w ten
sposób:
.br
.B gtk2? ( =x11-libs/gtk+-2* ) !gtk2? ( =x11-libs/gtk+-1* )
.br
W ten sposób domyślnie będzie wykorzystywać lepszą bibliotekę GTK2.
.TP
.B || ( Atom Atom ... )
Gdy pakiet może korzystać z kilku różnych pakietów, ale użycie pakietu
wirtualnego nie jest wskazane, można zastosować taką składnię.
.nf
.B || (
.B 	app-games/unreal-tournament
.B 	app-games/unreal-tournament-goty
.B )
.fi
W tym przypadku widać, że unreal-tournament posiada normalną wersję oraz wersję
goty. Oba pakiety posiadają te same pliki podstawowe i dla innych pakietów nie
ma znaczenia który z nich będzie zainstalowany. Jednak dodanie pakietu
wirtualnego nie jest wskazane, ze względu na małą wagę problemu. 
.br
Innym dobrym przykładem jest sytuacja, gdy pakiet może zostać skompilowany z
wieloma interfejsami wideo, ale może posiadać w danym czasie tylko jeden z nich.
.nf
.B || (
.B 	sdl? ( media-libs/libsdl )
.B 	svga? ( media-libs/svgalib )
.B 	opengl? ( virtual/opengl )
.B 	ggi? ( media-libs/libggi )
.B 	virtual/x11
.B )
.fi
W tym przypadku zostanie wybrany tylko jeden z pakietów, zaś kolejność, w jakiej
będą wybierane, ustala ich kolejność na liście. Tak więc sdl ma największe
szanse na bycie wybranym, zaraz po nim svga, następnie opengl, ggi, zaś jesli
użytkownik nie poda żadnej z poprzednich opcji, wybrany zostanie domyślny
interfejs, X.
.RE

.RE
.TP
\fBRDEPEND\fR
Zmienna ta powinna zawierać listę wszystkich pakietów, które są wymagane, aby
program uruchomił się (mówimy o nich też jako o zależnościach czasu
uruchamiania). Jeśli zmienna ta nie zostanie ustawiona, przyjmie tę samą
wartość, co zmienna \fBDEPEND\fR.
.br
Wszystkie powyższe sposoby definiowania zmiennych zależności dotyczą również
tej zmiennej.
.TP
\fBPDEPEND\fR
Zmienna ta powinna zawierać listę wszytkich tych pakietów, które muszą zostać
zainstalowane zaraz po zainstalowaniu naszego programu.
.br
Wszystkie powyższe sposoby definiowania zmiennych zależności dotyczą również
tej zmiennej.
.TP
\fBRESTRICT\fR = \fI[strip,mirror,fetch,userpriv]\fR
W tej zmiennej powinniśmy zawrzeć rozdzieloną spacjami listę restrykcji co do
opcji Portage.
.PD 0
.RS
.TP
.I fetch
podobne do opcji \fInomirror\fR, ale pliki nie będą również pobierane z
\fBSRC_URI\fR.
.TP
.I mirror
pliki wymienione w zmiennej \fBSRC_URI\fR nie będą pobierane z wymienionych w
zmiennej \fBGENTOO_MIRRORS\fR serwerów lustrzanych Gentoo.
.TP
.I primaryuri
najpierw należy pobrać pliki z URL-i wymienionych w zmiennej \fBSRC_URI\fR,
zanim wykorzystane zostaną serwery lustrzane z listy zawartej w
\fBGENTOO_MIRRORS\fR.
.TP
.I strip
będące ostatecznym produktem kompilacji pliki binarne i biblioteki nie będą
pozbawiane symboli debugowania.
.TP
.I sandbox
wyłącza funkcję sandbox (nie należy uzywać tej restrykcji bez naprawdę dobrego
uzasadnienia).
.TP
.I test
funkcja src_test nie zostanie uruchomiona, nawet jeśli użytkownik ustawił
zmienną \fBFEATURES\fR=test.
.TP
.I userpriv
Wyłącza funkcję userpriv dla okreslonych pakietów.
.RE
.PD 1
.TP
\fBPROVIDE\fR = \fI"virtual/TARGET"\fR
Powinniśmy użyć tej zmiennej tylko wtedy, gdy pakiet dostarcza funkcjonalności
wirtualnej. Przykładowo, pakiety blackdown-jdk i sun-jdk dostarczają
\fIvirtual/jdk\fR. Pozwala to pakietom zdefiniować zależność od pakietu
\fIvirtual/jdk\fR, zamiast konkretnie od pakietów blackdown lub sun.
.SH "PORTAGE DECLARATIONS" FIXME
.TP
.B inherit
Funkcjonalność "inherit" (dziedziczenia) to sposób zarządzania specjalnymi
klasami funkcji w Portage, które są zdefiniowane poza ebuildami i dostarczają
danych i możliwości, które można dziedziczyć. Definiują funkcje i typy danych
jako łatwo wymienialne części, rozszerzone oraz uproszczone fragmenty kodu,
służące do wykonywania najbardziej typowych zadań i czyniące proces budowania
bardziej eleganckim. Deklaracja inherit może być użyta w ebuildzie tylko raz i
\fBnigdy nie może być użyta wewnątrz jakichkolwiek instrukcji warunkowych\fR.
Eklasy należy podawać posługujac się wyłącznie ich nazwą, pomijając rozszerzenie
\fI.eclass\fR.
.SH "FUNCTIONS" FIXME
.TP
.B pkg_nofetch
Jeśli dodamy opcję \fIfetch\fR do zmiennej \fBRESTRICT\fR, wówczas zostanie
uruchomiona niniejsza funkcja, o ile nie będzie można znaleźć plików
wymienionych w zmiennej \fBSRC_URI\fR. Funkcja ta przydaje się głównie wtedy,
gdy trzeba poinformować użytkownika w jaki sposób samemu zdobyć wspomniane
pliki. Powinniśmy jedynie wyświetlić komunikat i pozwolić funkcji samej
zakończyć działanie. Nie należy wywoływać na końcu funkcji \fBdie\fR.
.TP
.B pkg_setup
Z tej funkcji korzystamy wtedy, gdy pakiet wymaga wykonania specjalnych poleceń
konfigurujących lub sprawdzeń, które muszą być wykonane na samym poczatku.
.br
Początkowy katalog roboczy to ${PORTAGE_TMPDIR}.
.TP
.B src_unpack
Funkcji tej używa się w celu rozpakowania wszystkich plików źródłowych z
katalogu \fIA\fR do katalogu \fIWORKDIR\fR. Jeśli funkcja nie będzie
zdefiniowana w skrypcie ebuild, automatycznie wywołana zostanie \fIunpack
${A}\fR. Nakładanie łatek i inne modyfikacje dokonywane przed procesem
konfigurowania i kompilacji powinny być wykonane tutaj.
.br
Początkowy katalog roboczy to $WORKDIR.
.TP
.B src_compile
Wszystkie czynności niezbędne przy konfiguracji i kompilacji powinny być
wykonane tutaj.
.br
Początkowy katalog roboczy to $S.
.TP
.B src_test
Wykonuje wszystkie procedury testujące danego pakietu. Domyślnie uruchamia
polecenie 'make check', a następnie 'make test'.
.br
Początkowy katalog roboczy to $S.
.TP
.B src_install
Funkcja ta powinna zawierać wszystkie niezbędne czynności, mające na celu
zainstalowanie pakietu w tymczasowym \fIkatalogu instalacji\fR.
.br
Początkowy katalog roboczy to $S.
.TP
.B pkg_preinst pkg_postinst
W tych funkcjach powinniśmy dokonywać wszelkich tych zmian w prawdziwym systemie
plików, które muszą być wykonane przed lub po osadzeniu pakietu w systemie.
Również komentarze dla użytkownika powinny znajdować się w tym miejscu, gdyż
wówczas będą wyświetlone jako ostatnie.
.br
Początkowy katalog roboczy to $PWD.
.TP
.B pkg_prerm pkg_postrm
Funkcje analogiczne do pkg_*inst, lecz służące do odinstalowania.
.br
Początkowy katalog roboczy to $PWD.
.TP
.B pkg_config
Funkcja ta powinna zawierać opcjonalne podstawowe czynności konfiguracyjne.
.br
Początkowy katalog roboczy to $PWD.
.SH "FUNKCJE POMOCNICZE: OGÓLNE"
.TP
\fBdie\fR \fI[powód]\fR
Powoduje przerwanie aktualnego procesu instalacji. Zostanie wyświetlony
komunikat \fIpowód\fR.
.TP
\fBuse\fR \fI<flaga USE>\fR
Jeśli \fIflaga USE\fR znajduje się w zmiennej \fBUSE\fR, niniejsza funkcja
zwróci 0 (wartość "prawda" powłoki), nie wypisując niczego. Jeśli \fIflagi
USE\fR nie ma w zmiennej \fBUSE\fR, funkcja zwróci wartość 1 (wartość "fałsz"
powłoki), nie wypisując niczego. Polecenie \fBusev\fR pełni tę samą funkcję co
\fBuse\fR, lecz wypisuje więcej komunikatów. 
.RS
.TP
.I Przykład:
.nf
if use gnome ; then
	guiconf="--enable-gui=gnome --with-x"
elif use gtk ; then
	guiconf="--enable-gui=gtk --with-x"
elif use X ; then
	guiconf="--enable-gui=athena --with-x"
else
	# Nie zostanie zbudowana wersja z gui
	guiconf=""
fi
.fi
.RE
.TP
\fBuse_with\fR \fI<flaga USE>\fR \fI[parametr configure]\fR \fI[opcja
configure]\fR
Funkcja przydatna przy tworzeniu własnej listy opcji, które chcemy przekazać
do skryptu configure. Jeśli \fIflaga USE\fR znajduje się w zmiennej \fBUSE\fR i
podamy \fIopcję configure\fR, wówczas zostanie wypisany napis
\fI--with-[parametr configure]=[opcja configure]\fR. Jeśli nie podamy \fIopcji
configure\fR, wówczas wypisane zostanie tylko \fI--with-[parametr configure]\fR.
Jeśli \fIflagi USE\fR nie ma w zmiennej \fBUSE\fR, wypisany zostanie napis
\fI--without-[parametr configure]\fR. Jeśli nie podamy \fIparametru
configure\fR, wówczas zamiast niego zostanie użyta \fIflaga USE\fR.
.RS
.TP
.I Przykłady:
.nf
USE="opengl"
myconf=$(use_with opengl)
(zmienna myconf ma teraz wartość "--with-opengl")

USE="jpeg"
myconf=$(use_with jpeg libjpeg)
(zmienna myconf ma teraz wartość "--with-libjpeg")

USE=""
myconf=$(use_with jpeg libjpeg)
(zmienna myconf ma teraz wartość "--without-libjpeg")

USE="sdl"
myconf=$(use_with sdl SDL all-plugins)
(zmienna myconf ma teraz wartość "--with-SDL=all-plugins")
.fi
.RE
.TP
\fBuse_enable\fR \fI<flaga USE>\fR \fI[parametr configure]\fR \fI[opcja configure]\fR
Funkcja działa analogicznie jak 

Same as \fBuse_with\fR above, except that the configure options are 
\fI--enable-\fR instead of \fI--with-\fR and \fI--disable-\fR instead of 
\fI--without-\fR.
.TP
\fBhas\fR \fI<item>\fR \fI<item list>\fR
If \fIitem\fR is in \fIitem list\fR, then \fIitem\fR is echoed and \fBhas\fR
returns 0.  Otherwise, nothing is echoed and 1 is returned. As indicated with
use, there is a non-echoing version \fBhasq\fR. Please use \fBhasq\fR in all
places where output is to be disregarded. Never use the output for calculation.
.br
The \fIitem list\fR is delimited by the \fIIFS\fR variable.  This variable
has a default value of ' ', or a space.  It is a \fBbash\fR(1) setting.
.TP
\fBhas_version\fR \fI<category/package-version>\fR
Check to see if \fIcategory/package-version\fR is installed on the system.
The parameter accepts all values that are acceptable in the \fBDEPEND\fR
variable.  The function returns 0 if \fIcategory/package-version\fR is
installed, 1 otherwise.
.TP
\fBbest_version\fR \fI<package name>\fR
This function will look up \fIpackage name\fR in the database of currently
installed programs and echo the "best version" of the package that is
currently installed.  The function returns 0 if there is a package that
matches \fIpackage name\fR.  Otherwise, the function will return 1.
.RS
.TP
.I Example:
VERINS="$(best_version net-ftp/glftpd)"
.br
(VERINS now has the value "net-ftp/glftpd-1.27" if glftpd-1.27 is installed)
.RE
.SH "HELPER FUNCTIONS: OUTPUT"
.TP
\fBeinfo\fR \fI"informative message"\fR
If you need to display an message that you wish the user to read and take 
notice of, then use \fBeinfo\fR.  It works just like \fBecho\fR(1), but 
adds a little more to the output so as to catch the user's eye.
.TP
\fBewarn\fR \fI"warning message"\fR
Same as \fBeinfo\fR, but should be used when showing a warning to the user.
.TP
\fBeerror\fR \fI"error message"\fR
Same as \fBeinfo\fR, but should be used when showing an error to the user.
.SH "HELPER FUNCTIONS: UNPACK"
.TP
\fBunpack\fR \fI<source>\fR \fI[list of more sources]\fR
This function uncompresses and/or untars a list of sources into the current
directory. The function will append \fIsource\fR to the \fBDISTDIR\fR variable.
.SH "HELPER FUNCTIONS: COMPILE"
.TP
\fBeconf\fR \fI[configure options]\fR
This is used as a replacement for configure.  Performs:
.nf
configure \\
	--prefix=/usr \\
	--host=${CHOST} \\
	--mandir=/usr/share/man \\
	--infodir=/usr/share/info \\
	--datadir=/usr/share \\
	--sysconfdir=/etc \\
	--localstatedir=/var/lib \\
	\fI${EXTRA_ECONF}\fR \\
	\fIconfigure options\fR
.fi
Note that the \fIEXTRA_ECONF\fR is for users only, not for ebuild 
writers.  If you wish to pass more options to configure, just pass the 
extra arguements to \fBeconf\fR.
.TP
\fBemake\fR \fI[make options]\fR
This is used as a replacement for make.  Performs 'make ${MAKEOPTS} 
\fImake options\fR' (as set in /etc/make.globals), default is MAKEOPTS="\-j2".

\fB***warning***\fR
.br
if you are going to use \fBemake\fR, make sure your build is happy with
parallel makes (make \-j2).  It should be tested thoroughly as parallel
makes are notorious for failing _sometimes_ but not always.
.SH "HELPER FUNCTIONS: INSTALL"
.TP
\fBeinstall\fR \fI[make options]\fR
This is used as a replacement for make install.  Performs:
.nf
make \\
	prefix=${D}/usr \\
	datadir=${D}/usr/share \\
	infodir=${D}/usr/share/info \\
	localstatedir=${D}/var/lib \\
	mandir=${D}/usr/share/man \\
	sysconfdir=${D}/etc \\
	\fI${EXTRA_EINSTALL}\fR \\
	\fImake options\fR \\
	install
.fi
Please do \fBnot\fR use this in place of 'make install DESTDIR=${D}'.  
That is the preferred way of installing make-based packages.  Also, do 
not utilize the \fIEXTRA_EINSTALL\fR variable since it is for users.

.PD 0
.TP
.B prepall
.TP
.B prepalldocs
.TP
.B prepallinfo
.TP
.B prepallman
.TP
.B prepallstrip
.PD 1
Useful for when a package installs into \fB${D}\fR via scripts
(i.e. makefiles).  If you want to be sure that libraries are executable,
aclocal files are installed into the right place, doc/info/man files are
all compressed, and that executables are all stripped of debugging symbols,
then use these suite of functions.
.RS
.PD 0
.TP
.B prepall:
Runs \fBprepallman\fR, \fBprepallinfo\fR, \fBprepallstrip\fR, sets
libraries +x, and then checks aclocal directories.  Please note this
does \fI*not*\fR run \fBprepalldocs\fR.
.TP
.B prepalldocs:
Compresses all doc files in ${D}/usr/share/doc.
.TP
.B prepallinfo:
Compresses all info files in ${D}/usr/share/info.
.TP
.B prepallman:
Compresses all man files in ${D}/usr/share/man.
.TP
.B prepallstrip:
Strips all executable files of debugging symboles.  This includes libraries.
.RE

.TP
\fBprepinfo\fR \fI[dir]\fR
.TP
\fBprepman\fR \fI[dir]\fR
.TP
\fBprepstrip\fR \fI[dir]\fR
.PD 1
Similiar to the \fBprepall\fR functions, these are subtle in their differences.
.RS
.PD 0
.TP
.B prepinfo:
If a \fIdir\fR is not specified, then \fBprepinfo\fR will assume the dir
\fIusr\fR. \fBprepinfo\fR will then compress all the files in
${D}/\fIdir\fR/info.
.TP
.B prepman:
If a \fIdir\fR is not specified, then \fBprepman\fR will assume the dir
\fIusr\fR. \fBprepman\fR will then compress all the files in
${D}/\fIdir\fR/man/*/.
.TP
.B prepstrip:
All the files found in ${D}/\fIdir\fR will be stripped.  You may specify
multiple directories.
.RE
.PD 1
.TP
\fBdopython\fR \fI<commands>\fR
Performs \fIcommands\fR with python and returns the result.
.TP
\fBdosed\fR \fI"s:orig:change:g" <filename>\fR
Performs sed (including cp/mv \fIfilename\fR) on \fIfilename\fR.
.br
.BR 'dosed\ "s:/usr/local:/usr:g"\ /usr/bin/some-script'
runs sed on ${D}/usr/bin/some-script
.TP
\fBdodir\fR \fI<path>\fR
Creates a directory inside of ${D}.
.br
.BR 'dodir\ /usr/lib/apache'
creates ${D}/usr/lib/apache.  Note that the do* functions will run 
\fBdodir\fR for you.
.TP
\fBdiropts\fR \fI[options for install(1)]\fR
Can be used to define options for the install function used in
\fBdodir\fR.  The default is \fI-m0755\fR.
.TP
\fBinto\fR \fI<path>\fR
Sets the root (\fIDESTTREE\fR) for other functions like \fBdobin\fR,
\fBdosbin\fR, \fBdoman\fR, \fBdoinfo\fR, \fBdolib\fR.
.br
The default root is /usr.
.TP
\fBkeepdir\fR \fI<path>\fR
Tells portage to leave a directory behind even if it is empty.  Functions
the same as \fBdodir\fR.
.TP
\fBdobin\fR \fI<binary> [list of more binaries]\fR
Installs a \fIbinary\fR or a list of binaries into \fIDESTTREE\fR/bin.
Creates all necessary dirs.
.TP
\fBdosbin\fR \fI<binary> [list of more binaries]\fR
Installs a \fIbinary\fR or a list of binaries into \fIDESTTREE\fR/sbin.
Creates all necessary dirs.
.TP
\fBdoinitd\fR \fI<init.d script> [list of more init.d scripts]\fR
Install Gentoo \fIinit.d scripts\fR.  They will be installed into the 
correct location for Gentoo init.d scripts (/etc/init.d/).  Creates all 
necessary dirs.
.TP
\fBdoconfd\fR \fI<conf.d file> [list of more conf.d file]\fR
Install Gentoo \fIconf.d files\fR.  They will be installed into the 
correct location for Gentoo conf.d files (/etc/conf.d/).  Creates all 
necessary dirs.
.TP
\fBdoenvd\fR \fI<env.d entry> [list of more env.d entries]\fR
Install Gentoo \fIenv.d entries\fR.  They will be installed into the 
correct location for Gentoo env.d entries (/etc/env.d/).  Creates all 
necessary dirs.

.PD 0
.TP
\fBdolib\fR \fI<library>\fR \fI[list of more libraries]\fR
.TP
\fBdolib.a\fR \fI<library>\fR \fI[list of more libraries]\fR
.TP
\fBdolib.so\fR \fI<library>\fR \fI[list of more libraries]\fR
.PD 1
Installs a library or a list of libraries into \fIDESTTREE\fR/lib.
Creates all necessary dirs.
.TP
\fBlibopts\fR \fI[options for install(1)]\fR
Can be used to define options for the install function used in
the \fBdolib\fR functions.  The default is \fI-m0644\fR.
.TP
\fBdoman\fR \fI[\-i18n=<locale>]\fR \fI<man-page> [list of more man\-pages]\fR
Installs manual\-pages into /usr/share/man/man[0\-9n] depending on the
manual file ending.  The files are compressed if they are not already.  You 
can specify locale-specific manpages with the \fI\-i18n\fR option.  Then the
man-page will be installed into /usr/share/man/\fI<locale>\fR/man[0\-9n].
.PD 0
.TP
\fBdohard\fR \fI<filename> <linkname>\fR
.TP
\fBdosym\fR \fI<filename> <linkname>\fR
.PD 1
Performs the ln command as either a hard link or symlink.
.TP
\fBdohtml\fR \fI [\-a filetypes] [\-r] [\-x list\-of\-dirs\-to\-ignore] [list\-of\-files\-and\-dirs]\fR
Installs the files in the list of files (space\-separated list) into
/usr/share/doc/${PF}/html provided the file ends in .html, .png, .js, .jpg,
or .css.  Setting \fI\-a\fR limits what types of files will be included,
\fI\-A\fR appends to the default list, setting \fI\-x\fR sets which dirs to
exclude (CVS excluded by default), \fI\-r\fR sets recursive.
.TP
\fBdoinfo\fR \fI<info-file> [list of more info\-files]\fR
Installs info\-pages into \fIDESTDIR\fR/info.  Files are automatically
gzipped.  Creates all necessary dirs.
.TP
\fBdojar\fR \fI<jar file> [list of more jar files]\fR
Installs jar files into /usr/share/${PN}/lib and adds them to
/usr/share/${PN}/classpath.env.
.TP
\fBdomo\fR \fI<locale-file> [list of more locale\-files] \fR
Installs locale\-files into \fIDESTDIR\fR/usr/share/locale/[LANG]
depending on local\-file's ending.  Creates all necessary dirs.

.PD 0
.TP
\fBfowners\fR \fI<permissions> <file> [files]\fR
.TP
\fBfperms\fR \fI<permissions> <file> [files]\fR
.PD 1
Performs chown (\fBfowners\fR) or chmod (\fBfperms\fR), applying
\fIpermissions\fR to \fIfiles\fR.
.TP
\fBinsinto\fR \fI[path]\fR
Sets the root (\fIINSDESTTREE\fR) for the \fBdoins\fR function.
.br
The default root is /.
.TP
\fBinsopts\fR \fI[options for install(1)]\fR
Can be used to define options for the install function used in
\fBdoins\fR.  The default is \fI\-m0644\fR.
.TP
\fBdoins\fR \fI<file> [list of more files]\fR
Installs files into \fIINSDESTTREE\fR.  This function uses \fBinstall\fR(1).  
Creates all necessary dirs.
.TP
\fBexeinto\fR \fI[path]\fR
Sets the root (\fIEXEDESTTREE\fR) for the \fBdoexe\fR function.
.br
The default root is /.
.TP
\fBexeopts\fR \fI[options for install(1)]\fR
Can be used to define options for the install function used in \fBdoexe\fR.
The default is \fI\-m0755\fR.
.TP
\fBdoexe\fR \fI<executable> [list of more executables]\fR
Installs a executable or a list of executable into \fIEXEDESTTREE\fR.
This function uses \fBinstall\fR(1).  Creates all necessary dirs.
.TP
\fBdocinto\fR \fI[path]\fR
Sets the relative subdir (\fIDOCDESTTREE\fR) used by \fBdodoc\fR.
.TP
\fBdodoc\fR \fI<document> [list of more documents]\fR
Installs a document or a list of document into /usr/share/doc/${PF}/\fIDOCDESTTREE\fR.
Files are automatically gzipped.  Creates all necessary dirs.

.PD 0
.TP
\fBnewbin\fR \fI<old file> <new filename>\fR
.TP
\fBnewsbin\fR \fI<old file> <new filename>\fR
.TP
\fBnewinitd\fR \fI<old file> <new filename>\fR
.TP
\fBnewconfd\fR \fI<old file> <new filename>\fR
.TP
\fBnewenvd\fR \fI<old file> <new filename>\fR
.TP
\fBnewlib\fR \fI<old file> <new filename>\fR
.TP
\fBnewlib.so\fR \fI<old file> <new filename>\fR
.TP
\fBnewlib.a\fR \fI<old file> <new filename>\fR
.TP
\fBnewman\fR \fI<old file> <new filename>\fR
.TP
\fBnewinfo\fR \fI<old file> <new filename>\fR
.TP
\fBnewins\fR \fI<old file> <new filename>\fR
.TP
\fBnewexe\fR \fI<old file> <new filename>\fR
.TP
\fBnewdoc\fR \fI<old file> <new filename>\fR
.PD 1
All these functions act like the do* functions, but they only work with one
file and the file is installed as \fI[new filename]\fR.
.SH "REPORTING BUGS"
Please report bugs via http://bugs.gentoo.org/
.SH "AUTHORS"
.nf
Achim Gottinger <achim@gentoo.org>
Mark Guertin <gerk@gentoo.org>
Nicholas Jones <carpaski@gentoo.org>
Mike Frysinger <vapier@gentoo.org>
.fi
.SH "FILES"
.TP
The \fI/usr/sbin/ebuild.sh\fR script.
.TP
The helper apps in \fI/usr/lib/portage/bin\fR.
.TP
\fB/etc/make.conf\fR 
Contains variables for the build\-process and overwrites those in make.defaults.
.TP
\fB/etc/make.globals\fR
Contains the default variables for the build\-process, you should edit
\fI/etc/make.conf\fR instead.
.SH "SEE ALSO"
.BR ebuild (1),
.BR make.conf (5)
