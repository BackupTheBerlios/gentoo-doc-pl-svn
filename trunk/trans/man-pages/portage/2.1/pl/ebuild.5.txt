.TH "EBUILD" "5" "Mar 2006" "Portage 2.1" "portage"
.SH "NAZWA"
ebuild \- format, zmienne i funkcje skryptów ebuild
.SH "OPIS"
Program
.BR ebuild (1)
przyjmuje pojedynczy skrypt ebuild jako argument. Skrypt ten zawiera zmienne i
polecenia, które określają w jaki sposób należy pobrać, rozpakować, poprawić,
skompilować, zainstalować i osadzić w systemie dany pakiet oprogramowania,
używając jego oryginalnych źródeł. Dodatkowo, skrypt może w razie potrzeby
zawierać polecenia wykonywane przed/po procesach instalacji/deinstalacji.
.SH "PRZYKŁAD"
Oto przykładowy prosty skrypt ebuild:

.DS
.nf
# Copyright 1999\-2006 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: $

inherit some_eclass another_eclass

DESCRIPTION="Super\-useful stream editor (sed)"
HOMEPAGE="http://www.gnu.org/software/sed/sed.html"
SRC_URI="ftp://alpha.gnu.org/pub/gnu/sed/${P}.tar.gz"

LICENSE="GPL\-2"
SLOT="0"
KEYWORDS="~x86"
IUSE=""

DEPEND="virtual/libc"
RDEPEND="virtual/libc"

src_compile() {
	econf || die "could not configure"
	emake || die "emake failed"
}

src_install() {
	into /usr
	doinfo doc/sed.info
	doman doc/sed.1
	into /
	dobin sed/sed || die "dobin sed failed"
	dodir /usr/bin
	dosym /bin/sed /usr/bin/sed
	dodoc NEWS README* THANKS TODO AUTHORS BUGS ANNOUNCE
}
.fi
.SH "ZMIENNE"
.TP
.B UWAGI NT. UŻYTKOWANIA
- Wszystkie zmienne, które można znaleźć w pliku \fBmake.conf\fR(5) są dla
  nas dostępne w plikach ebuild  (na przykład zmienne PORTAGE* i PORTDIR*)
.br
- Przypisując w skryptach ebuild wartości do zmiennych \fBnie wolno stawiać
spacji\fR pomiędzy nazwą zmiennej a znakiem równości.
.TP
.B P
Zmienna ta zawiera nazwę pakietu bez numeru rewizji ebuilda.
Nie wolno jej NIGDY modyfikować.
.br
\fBxfree-4.2.1-r2.ebuild\fR --> \fB$P\fR=='\fIxfree-4.2.1\fR'
.TP
.B PN
Zawiera nazwę skryptu bez numeru wersji.
.br
\fBxfree-4.2.1-r2.ebuild\fR --> \fB$PN\fR=='\fIxfree\fR'
.TP
.B PV
Zawiera numer wersji bez numeru rewizji.
.br
\fBxfree-4.2.1-r2.ebuild\fR --> \fB$PV\fR=='\fI4.2.1\fR'
.TP
.B PR
Zawiera numer rewizji lub 'r0', jeśli numer rewizji nie istnieje.
.br
\fBxfree-4.2.1-r2.ebuild\fR --> \fB$PR\fR=='\fIr2\fR'
.TP
.B PVR
Zawiera numer wersji oraz numer rewizji.
.br
\fBxfree-4.2.1-r2.ebuild\fR --> \fB$PVR\fR=='\fI4.2.1-r2\fR'
.TP
.B PF
Zawiera pełną nazwę pakietu \fI[PN]\-[PVR]\fR
.br
\fBxfree-4.2.1-r2.ebuild\fR --> \fB$PF\fR=='\fIxfree-4.2.1-r2\fR'
.TP
.B CATEGORY
Zawiera nazwę kategorii do której należy pakiet.
.TP
.B A
Zawiera wszystkie pliki źródłowe, których wymaga pakiet. Nigdy nie należy
definiować tej zmiennej. Jest ona automatycznie generowana ze zmiennej
\fISRC_URI\fR.
.TP
\fBWORKDIR\fR = \fI"${PORTAGE_TMPDIR}/portage/${PF}/work"\fR
Zawiera ścieżkę do głównego katalogu, w którym będzie budowany pakiet. Nie
należy modyfikować tej zmiennej.
.TP
\fBFILESDIR\fR = \fI"${PORTDIR}/${CATEGORY}/${PN}/files"\fR
Zawiera ścieżkę do podkatalogu 'files' z katalogu pakietu w drzewie portage. Nie
należy modyfikować tej zmiennej.
.TP
\fBS\fR = \fI"${WORKDIR}/${P}"\fR 
Zawiera ścieżkę do tymczasowego \fIkatalogu budowania\fR. Ze zmiennej tej
korzystają funkcje \fIsrc_compile\fR i \fIsrc_install\fR. Dla obu tych
funkcji katalogiem roboczym jest ścieżka ze zmiennej \fIS\fR. Zmienną tę
można zmodyfikować, umieszczając w niej ścieżkę do katalogu, do którego
zostało rozpakowane archiwum pakietu.
.TP
\fBT\fR = \fI"${PORTAGE_TMPDIR}/portage/${PF}/temp"\fR
Zawiera ściezkę do \fIkatalogu tymczasowego\fR. Zmiennej tej możemy używać
zgodnie z upodobaniami.
.TP
\fBD\fR = \fI"${PORTAGE_TMPDIR}/portage/${PF}/image"\fR
Zawiera ścieżkę do tymczasowego \fIkatalogu instalacji\fR. Każda operacja
zapisu, która nie wykorzystuje pomocniczych narzędzi i funkcji (opisanych
poniżej), powinna być poprzedzona zmienną ${D}. Nie należy modyfikować tej
zmiennej.
.TP
\fBDESCRIPTION\fR = \fI"Niezmiernie pożyteczny pakiet"\fR
Zmienna ta powinna zawierać krótki opis pakietu.
.TP
\fBSRC_URI\fR = \fI"http://pozyteczny.com/pakiet/${P}.tar.gz"\fR
Zawiera listę odnośników URI wymaganych plików źródłowych. Może zawierać wiele
odnośników dla pojedynczego pliku. Lista zostanie wykorzystana, jeśli plik nie
zostanie znaleziony na żadnym z serwerów w \fIGENTOO_MIRRORS\fB\fR.
.TP
\fBHOMEPAGE\fR = \fI"http://pozyteczny.com/"\fR
Powinna zawierać listę odnośników URL do strony głównej pakietu oraz innych
źródeł informacji na jego temat.
.TP
\fBKEYWORDS\fR = \fI[-~][x86,ppc,sparc,mips,alpha,arm,hppa]\fR 
Zmienna ta powinna zawierać listę architektur, o których wiemy, że ebuild na
nich zadziała/nie zadziała. Zwykle jeśli nie jesteśmy pewni co do architektury,
nie dodajemy jej do zmiennej. Jeśli ebuild nie zadziała na danej architekturze,
należy dodać ją poprzedzoną znakiem \-, na przykład \-ppc. Jeśli planujemy
dodać ebuild do drzewa Portage, powinniśmy podać ~arch dla tych architektur,
dla których ebuild NA PEWNO DZIAŁA. (Pakiety, które mają w ten sposób ustawiony
KEYWORD można odmaskować, ustawiając zmienną ACCEPT_KEYWORDS="~arch" w wierszu
poleceń lub w pliku \fBmake.conf\fR(5)). Miarodajną listę architektur
znajdziemy w pliku /usr/portage/profiles/arch.list. Lista powinna być
uporządkowana alfabetycznie.
.TP
\fBSLOT\fR
Za pomocą tej zmiennej ustawiamy wartość SLOT dla pakietów, które być może będą
musiały współistnieć. Domyślnie powinniśmy ustawić \fBSLOT\fR="0", chyba że
mamy poważne powody, by uczynić inaczej. Zmienna ta \fIZAWSZE\fR powinna zostać
ustawiona.
.TP
\fBLICENSE\fR
W tej zmiennej powinniśmy umieścić rozdzieloną spacjami listę licencji, na
których wydany jest pakiet. Ustawiane licencje \fB_muszą_\fR odpowiadać tym z
katalogu /usr/portage/licenses/. Jeśli danej licencji nie ma jeszcze w Portage,
najpierw należy ją tam dodać.
.TP
\fBIUSE\fR
Zmienna ta powinna zawierać listę wszelkich flag USE, z których korzysta nasz
skrypt. Możemy tu pominąć jedynie flagi właściwe dla architektury (patrz
\fBKEYWORDS\fR).
.TP
\fBDEPEND\fR
Zmienna ta powinna zawierać listę wszystkich pakietów, które muszą być już
zainstalowane, aby nasz pakiet dał się skompilować.
.RS
.TP
.B Atomy DEPEND
Atom depend to po prostu zależność, której Portage używa przy obliczaniu
powiązań między pakietami. Należy zauważyć, że jeśli dany Atom nie został
jeszcze zainstalowany, dopasowywana jest najnowsza dostępna wersja.
.RS
.TP
.B Podstawy atomów
Podstawy atomów to po prostu kompletna specyfikacja kategoria/nazwapakietu.
Oto przykładowe podstawy atomów:

.nf
.I sys-apps/sed
.I sys-libs/zlib
.I net-misc/dhcp
.fi
.TP
.B Wersje atomów
Czasem możemy potrzebować określić precyzyjnie jakie wersje atomów są nam
potrzebne. Należy jedynie zwrócić uwagę, że numery wersji muszą być łączone
przedrostkiem (patrz niżej). Dlatego numery wersji dodajemy jako przyrostek do
reszty:

.nf
sys-apps/sed\fI-4.0.5\fR
sys-libs/zlib\fI-1.1.4-r1\fR
net-misc/dhcp\fI-3.0_p2\fR
.fi

Numer wersji zwykle składa się z dwóch lub trzech liczb, oddzielonych
kropkami, na przykład 1.2 lub 4.5.2. Ten ciąg znaków może być czasem
zakończony literą, na przykład 1.2a lub 4.5.2z. Należy zwrócić uwagę, że
znak ten \fBnie ma\fR oznaczać statusu alpha, beta, itd... Do tego służą
osobne przyrostki: _alpha, _beta, _pre (pre-release), _rc (release
canditate) lub _p (patch).  Czyli dla trzeciej wersji pre-release pakietu
napisalibyśmy na przykład 1.2_pre3. 
.TP
.B Operatory przedrostkowe atomów [> >= = <= <]
Czasem możemy potrzebować określić zależność od ogólnych zakresów wersji
pakietów, zamiast podawać za każdym razem konkretną wersję. Do tego celu służą
standardowe operatory Boole'a:

.nf
\fI>\fRmedia-libs/libgd-1.6
\fI>=\fRmedia-libs/libgd-1.6
\fI=\fRmedia-libs/libgd-1.6
\fI<=\fRmedia-libs/libgd-1.6
\fI<\fRmedia-libs/libgd-1.6
.fi
.TP
.B Rozszerzone przedrostki [!~] i przyrostki [*] atomów
Na tym nie koniec funkcjonalności. W razie potrzebny możemy zdefiniować
pakiety blokujące oraz określić zakres interesujących nas wersji pakietów.
Należy też zwrócić uwagę, że te rozszerzone przyrostki i przedrostki można
dowolnie łączyć z klasami atomów, opisanymi wyżej. Oto kilka typowych
przykładów z drzewa Portage:

.nf
\fI!\fRapp-text/dos2unix
=dev-libs/glib-2\fI*\fR
\fI!\fR=net-fs/samba-2\fI*\fR
\fI~\fRnet-libs/libnet-1.0.2a
.fi

\fI!\fR oznacza, że dany pakiet nie może być zainstalowany w tym samym czasie
.br
\fI*\fR oznacza, że interesuje nas zainstalowanie dowolnej wersji pakietu z
podaną podstawą. Tak więc w przypadku '2*' interesują nas wersje '2.1', '2.2',
'2.2.1' itd, natomiast nie jesteśmy zainteresowani wersjami '1.0', '3.0',
'4.1' itd.
.br
\fI~\fR oznacza, że interesuje nas dowolna rewizja podstawowej wersji podanego
pakietu. W powyższym przykładzie więc mogą to być wersje '1.0.2a', '1.0.2a-r1',
'1.0.2a-r2' itd.
.RE
.TP
.B Dynamiczne zależności
Czasem, zależnie od użytych flag USE, programy mogą posiadać zmienną listę
zależności. Portage daje nam kilka sposobów na poradzenie sobie z tą
sytuacją.  Zauważmy tylko, że gdy używamy poniższych przykładów składni,
każdy przypadek jest traktowany jako jeden Atom w kontekście, w którym się
pojawia. Oznacza to, że każdy Atom może warunkowo włączać wiele atomów, jak
i może być zagnieżdżony w nieskończoność.
.RS
.TP
.B usevar? ( Atom DEPEND )
Aby dołączyć bibliotekę jpeg gdy użytkownik ustawił flagę jpeg w \fBUSE\fR,
należy użyć poniższej składni:
.br
.B jpeg? ( media-libs/jpeg )
.TP
.B !usevar? ( Atom )
Jeśli chcemy dołączyć pakiet tylko wtedy, gdy użytkownik nie włączył określonej
flagi w zmiennej \fBUSE\fR, należy użyć poniższej składni:
.br
.B !nophysfs? ( dev-games/physfs )
.br
Często przydaje się to wtedy, gdy chcemy dodać opcjonalne, lecz domyślnie
włączone wsparcie dla jakiejś funkcji.
.TP
.B usevar? ( Atom jeśli prawda ) !usevar? ( Atom jeśli fałsz )
Obsługa funkcjonalności takiej jak operator trójargumentowy z języka C odbywa
się za pomocą dwóch wyrażeń, jednego zwykłego, drugiego odwróconego. Jeśli
pakiet korzysta z GTK1 lub GTK2, ale nie obu na raz, możemy obsłużyć to w ten
sposób:
.br
.B gtk2? ( =x11-libs/gtk+-2* ) !gtk2? ( =x11-libs/gtk+-1* )
.br
W ten sposób domyślnie będzie wykorzystywać lepszą bibliotekę GTK2.
.TP
.B || ( Atom Atom ... )
Gdy pakiet może korzystać z kilku różnych pakietów, a użycie pakietu
wirtualnego nie jest wskazane, można zastosować taką składnię.
.nf
.B || (
.B 	app-games/unreal-tournament
.B 	app-games/unreal-tournament-goty
.B )
.fi
W tym przykładzie widać, że unreal-tournament posiada normalną wersję oraz
wersję goty. Oba pakiety posiadają te same pliki podstawowe i dla innych
pakietów nie ma znaczenia który z nich będzie zainstalowany. Jednak dodanie
pakietu wirtualnego nie jest wskazane, ze względu na małą wagę problemu. 
.br
Innym dobrym przykładem jest sytuacja, gdy pakiet może zostać skompilowany z
wieloma interfejsami wideo, ale może posiadać w danym czasie tylko jeden z nich.
.nf
.B || (
.B 	sdl? ( media-libs/libsdl )
.B 	svga? ( media-libs/svgalib )
.B 	opengl? ( virtual/opengl )
.B 	ggi? ( media-libs/libggi )
.B 	virtual/x11
.B )
.fi
W tym przypadku zostanie wybrany tylko jeden z pakietów, zaś kolejność, w jakiej
będą wybierane, ustala ich kolejność na liście. Tak więc sdl ma największe
szanse na bycie wybranym, zaraz po nim svga, następnie opengl, ggi, zaś jesli
użytkownik nie poda żadnej z poprzednich opcji, wybrany zostanie domyślny
interfejs, X.
.RE

.RE
.TP
\fBRDEPEND\fR
Zmienna ta powinna zawierać listę wszystkich pakietów, które są wymagane, aby
program uruchomił się (mówimy o nich też jako o zależnościach czasu
uruchamiania). Jeśli zmienna ta nie zostanie ustawiona, przyjmie tę samą
wartość, co zmienna \fBDEPEND\fR.
.br
Wszystkie powyższe sposoby definiowania zmiennych zależności dotyczą również
tej zmiennej.
.TP
\fBPDEPEND\fR
Zmienna ta powinna zawierać listę wszytkich tych pakietów, które muszą zostać
zainstalowane zaraz po zainstalowaniu naszego programu.
.br
Wszystkie powyższe sposoby definiowania zmiennych zależności dotyczą również
tej zmiennej.
.TP
\fBRESTRICT\fR = \fI[strip,mirror,fetch,userpriv]\fR
W tej zmiennej powinniśmy zawrzeć rozdzieloną spacjami listę restrykcji co do
opcji Portage.
.PD 0
.RS
.TP
.I binchecks
Wyłącza wszelkie sprawdzanie QA dla plików binarnych (nie należy używać bez
jakiegoś dobrego powodu). Więcej informacji w sekcji \fBZMIENNE KONTROLNE QA\fR.
.TP
.I confcache
Wyłącza użycie confcache przez econf.
.TP
.I fetch
podobne do opcji \fImirror\fR, ale pliki nie będą również pobierane z
\fBSRC_URI\fR.
.TP
.I mirror
pliki wymienione w zmiennej \fBSRC_URI\fR nie będą pobierane z wymienionych w
zmiennej \fBGENTOO_MIRRORS\fR serwerów lustrzanych Gentoo.
.TP
.I primaryuri
najpierw należy pobrać pliki z URL-i wymienionych w zmiennej \fBSRC_URI\fR,
zanim wykorzystane zostaną serwery lustrzane z listy zawartej w
\fBGENTOO_MIRRORS\fR.
.TP
.I strip
będące ostatecznym produktem kompilacji pliki binarne i biblioteki nie będą
pozbawiane symboli debugowania.
.TP
.I sandbox
wyłącza funkcję sandbox (nie należy uzywać tej restrykcji bez naprawdę dobrego
uzasadnienia).
.TP
.I test
funkcja src_test nie zostanie uruchomiona, nawet jeśli użytkownik ustawił
zmienną \fBFEATURES\fR=test.
.TP
.I userpriv
Wyłącza funkcję userpriv dla okreslonych pakietów.
.RE
.PD 1
.TP
\fBPROVIDE\fR = \fI"virtual/TARGET"\fR
Powinniśmy użyć tej zmiennej tylko wtedy, gdy pakiet dostarcza funkcjonalności
wirtualnej. Przykładowo, pakiety blackdown-jdk i sun-jdk dostarczają
\fIvirtual/jdk\fR. Pozwala to pakietom zdefiniować zależność od pakietu
\fIvirtual/jdk\fR, zamiast konkretnie od pakietów blackdown lub sun.
.SH "ZMIENNE KONTROLNE QA"
.TP
.B UŻYCIE
Jest kilka zmiennych QA, które pozwalają ebuildowi wykonywać parę manipulacji
związanych z testami QA. Użycie tych zmiennych powinno być jak najmniejsze.
W innym wypadku, łamały by zasady testów QA ustanowione przez grupę QA. Ich
podstawowym zastosowaniem jest użycie w ebuildach, które instalują zamknięte
oprogramowanie, które nie może być modyfikowane.
.br
Nalezy pamiętać, że obiekty, które łamią te zasady mogą nie działać na pewnych
architekturach.
.TP
\fBQA_TEXTRELS\fR
Ta zmienna może być ustawiona jako lista plików, relatywnie do katalogu z
obrazem, dla plików, których przeniesienie nie może zostać wyelminowane.
Ścieżka może zawierać wyrażenia regularne.
.br
Ta zmienna jest przeznaczona do użycia z zamkniętym oprogramowaniem, które nie
może być modyfikowane.
.TP
\fBQA_EXECSTACK\fR
Ta zmienna powinna zawierać listę plików, relatywną do katalogu z obrazem,
obiektów które wymagają wykonywalnego stosu, by móc działać.
Ścieżka może zawierać wyrażenia regularne.
.br
Ta zmienna jest przeznaczona do użycia z obiektami, które rzeczywiście wymagają
wykonywalnego stosu (np. nie te, które twierdzą, że wymagają, ale w
rzeczywistości nie).
.TP
\fBQA_WX_LOAD\fR
Ta zmienna powinna zawierać listę plików, relatywną do katalogu z obrazem,
plików, które zawierają zapisywalne i wykonywalne części. Rzadko spotykane.
Ścieżka może zawierać wyrażenia regularne.
.SH "DEKLARACJE PORTAGE"
.TP
.B inherit
Funkcjonalność "inherit" (dziedziczenia) to sposób zarządzania specjalnymi
klasami funkcji w Portage, które są zdefiniowane poza ebuildami i dostarczają
danych i możliwości, które można dziedziczyć. Definiują funkcje i typy danych
jako łatwo wymienialne części, rozszerzone oraz uproszczone fragmenty kodu,
służące do wykonywania najbardziej typowych zadań i czyniące proces budowania
bardziej eleganckim. Deklaracja inherit może być użyta w ebuildzie tylko raz i
\fBnigdy nie może być użyta wewnątrz jakichkolwiek instrukcji warunkowych\fR.
Eklasy należy podawać posługujac się wyłącznie ich nazwą, pomijając rozszerzenie
\fI.eclass\fR. "inherit" musi się pojawić przed deklaracją zmiennych.
.SH "FUNKCJE"
.TP
.B pkg_nofetch
Jeśli dodamy opcję \fIfetch\fR do zmiennej \fBRESTRICT\fR, wówczas zostanie
uruchomiona niniejsza funkcja, o ile nie będzie można znaleźć plików
wymienionych w zmiennej \fBSRC_URI\fR. Funkcja ta przydaje się głównie wtedy,
gdy trzeba poinformować użytkownika w jaki sposób samemu zdobyć wspomniane
pliki. Powinniśmy jedynie wyświetlić komunikat i pozwolić funkcji samej
zakończyć działanie. Nie należy wywoływać na końcu funkcji \fBdie\fR.
.TP
.B pkg_setup
Z tej funkcji korzystamy wtedy, gdy pakiet wymaga wykonania specjalnych poleceń
konfigurujących lub sprawdzeń, które muszą być wykonane na samym poczatku.
.br
Początkowy katalog roboczy to ${PORTAGE_TMPDIR}.
.TP
.B src_unpack
Funkcji tej używa się w celu rozpakowania wszystkich plików źródłowych z
katalogu \fIA\fR do katalogu \fIWORKDIR\fR. Jeśli funkcja nie będzie
zdefiniowana w skrypcie ebuild, automatycznie wywołana zostanie \fIunpack
${A}\fR. Nakładanie łatek i inne modyfikacje dokonywane przed procesem
konfigurowania i kompilacji powinny być wykonane tutaj.
.br
Początkowy katalog roboczy to $WORKDIR.
.TP
.B src_compile
Wszystkie czynności niezbędne przy konfiguracji i kompilacji powinny być
wykonane tutaj.
.br
Początkowy katalog roboczy to $S.
.TP
.B src_test
Wykonuje wszystkie procedury testujące danego pakietu. Domyślnie uruchamia
polecenie 'make check', a następnie 'make test'.
.br
Początkowy katalog roboczy to $S.
.TP
.B src_install
Funkcja ta powinna zawierać wszystkie niezbędne czynności, mające na celu
zainstalowanie pakietu w tymczasowym \fIkatalogu instalacji\fR.
.br
Początkowy katalog roboczy to $S.
.TP
.B pkg_preinst pkg_postinst
W tych funkcjach powinniśmy dokonywać wszelkich tych zmian w prawdziwym systemie
plików, które muszą być wykonane przed lub po osadzeniu pakietu w systemie.
Również komentarze dla użytkownika powinny znajdować się w tym miejscu, gdyż
wówczas będą wyświetlone jako ostatnie.
.br
Początkowy katalog roboczy to $PWD.
.TP
.B pkg_prerm pkg_postrm
Funkcje analogiczne do pkg_*inst, lecz służące do odinstalowania.
.br
Początkowy katalog roboczy to $PWD.
.TP
.B pkg_config
Funkcja ta powinna zawierać opcjonalne podstawowe czynności konfiguracyjne.
.br
Początkowy katalog roboczy to $PWD.
.SH "FUNKCJE POMOCNICZE: OGÓLNE"
.TP
\fBdie\fR \fI[powód]\fR
Powoduje przerwanie aktualnego procesu instalacji. Zostanie wyświetlony
komunikat \fIpowód\fR.
.TP
\fBuse\fR \fI<flaga USE>\fR
Jeśli \fIflaga USE\fR znajduje się w zmiennej \fBUSE\fR, niniejsza funkcja
zwróci 0 (wartość "prawda" powłoki), nie wypisując niczego. Jeśli \fIflagi
USE\fR nie ma w zmiennej \fBUSE\fR, funkcja zwróci wartość 1 (wartość "fałsz"
powłoki), nie wypisując niczego. Polecenie \fBusev\fR pełni tę samą funkcję co
\fBuse\fR, lecz wypisuje więcej komunikatów. 
.RS
.TP
.I Przykład:
.nf
if use gnome ; then
	guiconf="--enable-gui=gnome --with-x"
elif use gtk ; then
	guiconf="--enable-gui=gtk --with-x"
elif use X ; then
	guiconf="--enable-gui=athena --with-x"
else
	# Nie zostanie zbudowana wersja z gui
	guiconf=""
fi
.fi
.RE
.TP
\fBuse_with\fR \fI<flaga USE>\fR \fI[parametr configure]\fR \fI[opcja configure]\fR
Funkcja przydatna przy tworzeniu własnej listy opcji, które chcemy przekazać
do skryptu configure. Jeśli \fIflaga USE\fR znajduje się w zmiennej \fBUSE\fR i
podamy \fIopcję configure\fR, wówczas zostanie wypisany napis
\fI--with-[parametr configure]=[opcja configure]\fR. Jeśli nie podamy \fIopcji
configure\fR, wówczas wypisane zostanie tylko \fI--with-[parametr configure]\fR.
Jeśli \fIflagi USE\fR nie ma w zmiennej \fBUSE\fR, wypisany zostanie napis
\fI--without-[parametr configure]\fR. Jeśli nie podamy \fIparametru
configure\fR, wówczas zamiast niego zostanie użyta \fIflaga USE\fR.
.RS
.TP
.I Przykłady:
.nf
USE="opengl"
myconf=$(use_with opengl)
(zmienna myconf ma teraz wartość "--with-opengl")

USE="jpeg"
myconf=$(use_with jpeg libjpeg)
(zmienna myconf ma teraz wartość "--with-libjpeg")

USE=""
myconf=$(use_with jpeg libjpeg)
(zmienna myconf ma teraz wartość "--without-libjpeg")

USE="sdl"
myconf=$(use_with sdl SDL all-plugins)
(zmienna myconf ma teraz wartość "--with-SDL=all-plugins")
.fi
.RE
.TP
\fBuse_enable\fR \fI<flaga USE>\fR \fI[parametr configure]\fR \fI[opcja configure]\fR
Funkcja działa analogicznie jak \fBuse_with\fR, tylko że opcje
do configure to \fI--enable-\fR zamiast \fI--with-\fR oraz \fI--disable-\fR
zamiast \fI--without-\fR.
.TP
\fBhas\fR \fI<element>\fR \fI<lista elementów>\fR
Jeśli \fIelement\fR znajduje się na \fIliście elementów\fR, wówczas
\fIelement\fR zostanie wypisany na ekran, a funkcja \fBhas\fR zwróci 0. W
przeciwnym wypadku nic nie zostanie wypisane, a funkcja zwróci 1.
Analogicznie jak w przypadku funkcji use, istnieje funkcja \fBhasq\fR, która
nic nie wypisuje na ekran. Należy używać jej wszędzie tam, gdzie to, co
funkcja wypisuje, jest nieistotne. Nigdy nie należy używać tych danych do
obliczeń.
.br
Zmienna \fIIFS\fR decyduje o znaku, który będzie oddzielał poszczególne
elementy \fIlisty elementów\fR. Zmienna ta przyjmuje domyślną wartość ' ',
czyli spację. Jest to ustawienie powłoki \fBbash\fR(1).
.TP
\fBhas_version\fR \fI<kategoria/pakiet-wersja>\fR
Funkcja sprawdza czy \fIkategoria/pakiet-wersja\fR jest zainstalowana.
Wszystkie wartości, jakie są akceptowalne w zmiennej \fBDEPEND\fR mogą być
użyte jako parametr funkcji. Zwraca ona 0 jeśli
\fI<kategoria/pakiet-wersja>\fR jest zainstalowana, zaś 1 jeśli nie.
.TP
\fBbest_version\fR \fI<nazwa pakietu>\fR
Funkcja ta wyszuka \fInazwę pakietu\fR w bazie danych aktualnie
zainstalowanych programów i wypisze na ekran "najlepszą wersję" spośród
nich.
.RS
.TP
.I Przykład:
VERINS="$(best_version net-ftp/glftpd)"
.br
(Zmienna VERINS posiada teraz wartość "net-ftp/glftpd-1.27" jeśli
zainstalowany jest pakiet glftpd-1.27)
.RE
.SH "FUNKCJE POMOCNICZE: WYPISYWANIE NA EKRAN"
.TP
\fBeinfo\fR \fI"powiadomienie"\fR
Jeśli chcemy wypisać komunikat, na który użytkownik powinien zwrócić uwagę 
i go przeczytać, powinniśmy użyć funkcji \fBeinfo\fR. Działa ona podobnie jak
\fBecho\fR(1), tylko wyświetla tekst tak, aby przyciągnąć uwagę użytkownika.
.TP
\fBewarn\fR \fI"ostrzeżenie"\fR
Funkcja działa podobnie jak \fBeinfo\fR, lecz powinna być używana wtedy, gdy
chcemy ostrzec użytkownika.
.TP
\fBeerror\fR \fI"komunikat błędu"\fR
Funkcja działa podobnie jak \fBeinfo\fR, lecz powinna być używana wtedy, gdy
chcemy powiadomić użytkownika o błędzie.
.TP
\fBebegin\fR \fI"komunikat"\fR
Podobnie jak w przypadku funkcji \fBeinfo\fR, wypisujemy \fIkomunikat\fR,
dając do zrozumienia, że wykonywana operacja może zająć trochę czasu. Gdy
zakończy się ona, musimy wywołać funkcję \fBeend\fR.
.TP
\fBeend\fR \fI<status>\fR \fI["komunikat błędu"]\fR
Funkcja ta dopisuje do komunikatu funkcji \fBebegin\fR znacznik "OK" lub
"!!" (w przypadku wystąpienia błędu). Jeśli \fIstatus\fR jest niezerowy,
dodatkowo zostanie wypisany \fIkomunikat błędu\fR.
.SH "FUNKCJE POMOCNICZE: ROZPAKOWYWANIE"
.TP
\fBunpack\fR \fI<źródło>\fR \fI[lista następnych źródeł]\fR
Funkcja ta rozpakowuje archiwa i/lub pliki tar z listy źródeł do bieżącego
katalogu. Oprócz rozpakowania, funkcja dołączy \fIźródło\fR do zmiennej
\fBDISTDIR\fR.
.SH "FUNKCJE POMOCNICZE: KOMPILACJA"
.TP
\fBeconf\fR \fI[opcje configure]\fR
Funkcji tej używa się zamiast skryptu configure. Wykonuje ona następujące
polecenie:
.nf
configure \\
	--prefix=/usr \\
	--host=${CHOST} \\
	--mandir=/usr/share/man \\
	--infodir=/usr/share/info \\
	--datadir=/usr/share \\
	--sysconfdir=/etc \\
	--localstatedir=/var/lib \\
	\fI${EXTRA_ECONF}\fR \\
	\fIopcje configure\fR
.fi
Należy zwrócić uwagę, że zmienna \fIEXTRA_ECONF\fR ma służyć użytkownikom, a
nie autorom ebuildów. Jeśli chcemy przekazać skryptowi configure więcej
opcji, należy to zrobić poprzez dodanie argumentów do funkcji \fBeconf\fR.
.TP
\fBemake\fR \fI[opcje make]\fR
Funkcji tej używa się zamiast polecenia make. Wykonuje ona polecenie 'make
${MAKEOPTS} \fIopcje make\fR' (zgodnie z ustawieniami w pliku /etc/make.globals),
domyślną wartością jest MAKEOPTS="\-j2".

\fB***uwaga***\fR
.br
jeśli zamierzamy użyć funkcji \fBemake\fR, powinniśmy upewnić się, że
kompilowany program poradzi sobie z budowaniem równoległym (make \-j2).
Należy to dokładnie przetestować, ponieważ budowanie równoległe najczęściej
zawodzi _czasem_, a nie za każdym razem. Jeśli stwierdzimy, że nasz pakiet
nie buduje się równolegle i nie będziemy potrafili tego naprawić, powinniśmy
wywoływać '\fBemake\fR -j1' zamiast 'make'.
.SH "FUNKCJE POMOCNICZE: INSTALACJA"
.TP
\fBeinstall\fR \fI[opcje make]\fR
Funkcji tej używa się zamiast polecenia make install. Wykonuje ona
następujące polecenie:
.nf
make \\
	prefix=${D}/usr \\
	datadir=${D}/usr/share \\
	infodir=${D}/usr/share/info \\
	localstatedir=${D}/var/lib \\
	mandir=${D}/usr/share/man \\
	sysconfdir=${D}/etc \\
	\fI${EXTRA_EINSTALL}\fR \\
	\fIopcje make\fR \\
	install
.fi
\fBNie\fR należy używać tej funkcji zamiast 'make install DESTDIR=${D}'.
Jest to bowiem preferowany sposób instalowania pakietów opartych na make.
Nie należy również wykorzystywać zmiennej \fIEXTRA_EINSTALL\fR, gdyż służy
ona użytkownikom.

.PD 0
.TP
.B prepall
.TP
.B prepalldocs
.TP
.B prepallinfo
.TP
.B prepallman
.TP
.B prepallstrip
.PD 1
Funkcje te przydają się, gdy program jest instalowany do katalogu \fB${D}\fR
poprzez skrypty (na przykład pliki Makefile). Jeśli chcemy upewnić się, że
biblioteki są wykonywalne, pliki aclocal są instalowane we właściwym
miejscu, pliki doc/info/man są skompresowane, a pliki wykonywalne zostały
pozbawione symboli debugowania, powinniśmy użyć tego zestawu funkcji.
.RS
.PD 0
.TP
.B prepall:
Funkcja wywołuje funkcje \fBprepallman\fR, \fBprepallinfo\fR,
\fBprepallstrip\fR, ustawia uprawnienia wykonywalności dla bibliotek i
sprawdza katalogi aclocal. Należy zauważyć, że funkcja ta \fI*nie*\fR
wywołuje funkcji \fBprepalldocs\fR.
.TP
.B prepalldocs:
Kompresuje pliki z dokumentacją w katalogu ${D}/usr/share/doc.
.TP
.B prepallinfo:
Kompresuje pliki info w katalogu ${D}/usr/share/info.
.TP
.B prepallman:
Kompresuje pliki man w katalogu ${D}/usr/share/man.
.TP
.B prepallstrip:
Usuwa symbole debugowania ze wszystkich plików wykonywalnych i bibliotek.
.RE

.TP
\fBprepinfo\fR \fI[katalog]\fR
.TP
\fBprepman\fR \fI[katalog]\fR
.TP
\fBprepstrip\fR \fI[katalog]\fR
.PD 1
Funkcje różnią się nieznacznie od funkcji \fBprepall\fR.
.RS
.PD 0
.TP
.B prepinfo:
Jeśli \fIkatalog\fR nie został podany, funkcja \fBprepinfo\fR będzie działać
na katalogu \fIusr\fR. Jej działanie polega na skompresowaniu wszystkich
plików w katalogu ${D}/\fIkatalog\fR/info.
.TP
.B prepman:
Jeśli \fIkatalog\fR nie został podany, funkcja \fBprepman\fR będzie działać
na katalogu \fIusr\fR. Jej działanie polega na skompresowaniu wszystkich
plików w katalogu ${D}/\fIdir\fR/man/*/.
.TP
.B prepstrip:
Wszystkie pliki w katalogu ${D}/\fIkatalog\fR zostaną pozbawione symboli
debugowania. Możliwe jest podanie więcej niż jednego katalogu.
.RE
.PD 1
.TP
\fBdopython\fR \fI<polecenia>\fR
Wykonuje \fIpolecenia\fR za pomocą interpretera języka python i zwraca
wynik.
.TP
\fBdosed\fR \fI"s:oryginał:zmiana:g" <plik>\fR
Uruchamia program sed (w tym skopiowanie/przeniesienie \fIpliku\fR) dla
\fIpliku\fR.
.br
.BR 'dosed\ "s:/usr/local:/usr:g"\ /usr/bin/jakiś-skrypt'
uruchamia program sed dla pliku ${D}/usr/bin/jakiś-skrypt
.TP
\fBdodir\fR \fI<ścieżka>\fR
tworzy katalog wewnątrz katalogu ${D}.
.br
.BR 'dodir\ /usr/lib/apache'
tworzy katalog ${D}/usr/lib/apache. Zauważmy, że funkcje do* wywołają
funkcję \fBdodir\fR za nas.
.TP
\fBdiropts\fR \fI[opcje dla programu install(1)]\fR
Funkcja ta może zostać użyta do podania opcji funkcji install, którą
wykorzystuje funkcja \fBdodir\fR. Domyślne opcje to \fI-m0755\fR.
.TP
\fBinto\fR \fI<ścieżka>\fR
Ustawia katalog główny (\fIDESTTREE\fR) dla pozostałych funkcji, takich jak
\fBdobin\fR, \fBdosbin\fR, \fBdoman\fR, \fBdoinfo\fR, \fBdolib\fR.
.br
Domyślnym katalogiem głównym jest /usr.
.TP
\fBkeepdir\fR \fI<ścieżka>\fR
Instruuje portage, aby nie kasował katalogu, nawet jeśli jest pusty. Działa
tak samo jak funkcja \fBdodir\fR.
.TP
\fBdobin\fR \fI<plik binarny> [więcej plików binarnych]\fR
Instaluje \fIplik binarny\fR lub całą ich listę do katalogu
\fIDESTTREE\fR/bin. W razie potrzeby tworzy katalogi.
.TP
\fBdosbin\fR \fI<plik binarny> [więcej plików binarnych]\fR
Instaluje \fIplik binarny\fR lub całą ich listę do katalogu
\fIDESTTREE\fR/sbin. W razie potrzeby tworzy katalogi.
.TP
\fBdoinitd\fR \fI<skrypt init.d> [więcej skryptów init.d]\fR
Instaluje \fIskrypty init.d\fR Gentoo. Zostaną zainstalowane w prawidłowym
dla Gentoo katalogu dla tego rodzaju plików (/etc/init.d/). W razie potrzeby
zostaną utworzone potrzebne katalogi.
.TP
\fBdoconfd\fR \fI<plik conf.d> [więcej plików conf.d]\fR
Instaluje \fIpliki conf.d\fR Gentoo. Zostaną zainstalowane w prawidłowym dla
Gentoo katalogu dla tego rodzaju plików (/etc/conf.d/). W razie potrzeby
zostaną utworzone potrzebne katalogi.
.TP
\fBdoenvd\fR \fI<plik env.d> [więcej plików env.d]\fR
Instaluje \fIpliki env.d\fR Gentoo. Zostaną zainstalowane w prawidłowym dla
Gentoo katalogu dla tego rodzaju plików (/etc/env.d/). W razie potrzeby
zostaną utworzone potrzebne katalogi.

.PD 0
.TP
\fBdolib\fR \fI<biblioteka>\fR \fI[więcej bibliotek]\fR
.TP
\fBdolib.a\fR \fI<biblioteka>\fR \fI[więcej bibliotek]\fR
.TP
\fBdolib.so\fR \fI<biblioteka>\fR \fI[więcej bibliotek]\fR
.PD 1
Funkcje te instalują bibliotekę lub całą ich listę w katalogu
\fIDESTTREE\fR/lib. W razie potrzeby tworzy katalogi.
.TP
\fBlibopts\fR \fI[opcje dla funkcji install(1)]\fR
Funkcji tej możemy użyć, aby zdefiniować opcje dla funkcji install, z której
korzystają funkcje \fBdolib\fR. Domyślna opcja to \fI-m0644\fR.
.TP
\fBdoman\fR \fI[\-i18n=<locale>]\fR \fI<strona man> [więcej stron man]\fR
Instaluje strony dokumentacji systemowej man do katalogu
/usr/share/man/man[0\-9n], w zależności od końcówki pliku man. Pliki zostaną
skompresowane, jeśli jeszcze nie są. Możemy podać strony man specyficzne dla
używanego locale za pomocą opcji \fI\-i18n\fR. Wówczas strona podręcznika
zostanie zainstalowana do katalogu /usr/share/man/\fI<locale>\fR/man[0\-9n].
.PD 0
.TP
\fBdohard\fR \fI<nazwa pliku> <nazwa dowiązania>\fR
.TP
\fBdosym\fR \fI<nazwa pliku> <nazwa dowiązania>\fR
.PD 1
Wykonuje polecenie ln tworząc albo dowiązanie twarde (hard), albo
symboliczne (sym).
.TP
\fBdohtml\fR \fI [\-a typy\-plików] [\-r] [\-x lista\-katalogów\-do\-pominięcia] [lista\-plików\-i\-katalogów]\fR
Instaluje pliki z listy (nazwy plików rozdzielone spacjami) do katalogu
/usr/share/doc/${PF}/html pod warunkiem, że nazwa pliku kończy się na .html,
.png, .js, .jpg, lub .css. Można ograniczyć brane pod uwagę typy plików
poprzez użycie opcji \fI\-a\fR, zaś za pomocą opcji \fI\-A\fR możemy dodać
typy plików do listy domyślnych. Poprzez parametr \fI\-x\fR możemy określić
katalogi do pominięcia (domyślnie pomijany jest katalog CVS), zaś parametr
\fI\-r\fR włącza pracę rekursywną.
.TP
\fBdoinfo\fR \fI<pliki-info> [więcej plików info]\fR
Instaluje pliki dokumentacji info do katalogu \fIDESTDIR\fR/info. Pliki są
automatycznie kompresowane za pomocą narzędzia gzip. W razie potrzeby tworzy
katalogi.
.TP
\fBdojar\fR \fI<plik jar> [więcej plików jar]\fR
Instaluje pliki jar do katalogu /usr/share/${PN}/lib i dodaje je do pliku
/usr/share/${PN}/classpath.env.
.TP
\fBdomo\fR \fI<plik locale> [więcej plików locale] \fR
Instaluje pliki locale do katalogu \fIDESTDIR\fR/usr/share/locale/[LANG], w
zależności od końcówki nazwy pliku. Tworzy katalogi w razie potrzeby.

.PD 0
.TP
\fBfowners\fR \fI<uprawnienia> <plik> [więcej plików]\fR
.TP
\fBfperms\fR \fI<uprawnienia> <plik> [więcej plików]\fR
.PD 1
Wykonuje polecenie chown (funkcja \fBfowners\fR) lub chmod (funkcja
\fBfperms\fR), nadając \fIuprawnienia\fR \fIplikom\fR.
.TP
\fBinsinto\fR \fI[ścieżka]\fR
Ustawia katalog główny (\fIINSDESTTREE\fR) dla funkcji \fBdoins\fR.
.br
Domyślnym katalogiem głównym jest /.
.TP
\fBinsopts\fR \fI[opcje dla funkcji install(1)]\fR
Funkcji tej możemy użyć, aby zdefiniować opcje dla funkcji install, z której
korzysta funkcja \fBdoins\fR. Domyślne opcje to \fI\-m0644\fR.
.TP
\fBdoins\fR \fI<plik> [więcej plików]\fR
Instaluje pliki do katalogu \fIINSDESTTREE\fR. Funkcja ta korzysta z funkcji
\fBinstall\fR(1). W razie potrzeby tworzy niezbędne katalogi.
.TP
\fBexeinto\fR \fI[ścieżka]\fR
Ustawia katalog główny (\fIEXEDESTTREE\fR) dla funkcji \fBdoexe\fR.
.br
Domyślnym katalogiem głównym jest /.
.TP
\fBexeopts\fR \fI[opcje dla funkcji install(1)]\fR
Funkcji tej możemy użyć, aby zdefiniować opcje dla funkcji install, z której
korzysta funkcja \fBdoexe\fR. Domyślne opcje to \fI\-m0755\fR.
.TP
\fBdoexe\fR \fI<plik wykonywalny> [więcej plików wykonywalnych]\fR
Instaluje jeden lub więcej plików wykonywalnych do katalogu
\fIEXEDESTTREE\fR. Funkcja ta korzysta z funkcji \fBinstall\fR(1). W razie
potrzeby tworzy niezbędne katalogi.
.TP
\fBdocinto\fR \fI[ścieżka]\fR
Ustawia podkatalog względny (\fIDOCDESTTREE\fR), z którego korzysta funkcja
\fBdodoc\fR.
.TP
\fBdodoc\fR \fI<dokument> [więcej dokumentów]\fR
Instaluje jeden lub więcej dokumentów do katalogu
/usr/share/doc/${PF}/\fIDOCDESTTREE\fR. Pliki są automatycznie kompresowane
za pomocą narzędzia gzip. W razie potrzeby tworzy niezbędne katalogi.

.PD 0
.TP
\fBnewbin\fR \fI<stary plik> <nowa nazwa pliku>\fR
.TP
\fBnewsbin\fR \fI<stary plik> <nowa nazwa pliku>\fR
.TP
\fBnewinitd\fR \fI<stary plik> <nowa nazwa pliku>\fR
.TP
\fBnewconfd\fR \fI<stary plik> <nowa nazwa pliku>\fR
.TP
\fBnewenvd\fR \fI<stary plik> <nowa nazwa pliku>\fR
.TP
\fBnewlib\fR \fI<stary plik> <nowa nazwa pliku>\fR
.TP
\fBnewlib.so\fR \fI<stary plik> <nowa nazwa pliku>\fR
.TP
\fBnewlib.a\fR \fI<stary plik> <nowa nazwa pliku>\fR
.TP
\fBnewman\fR \fI<stary plik> <nowa nazwa pliku>\fR
.TP
\fBnewinfo\fR \fI<stary plik> <nowa nazwa pliku>\fR
.TP
\fBnewins\fR \fI<stary plik> <nowa nazwa pliku>\fR
.TP
\fBnewexe\fR \fI<stary plik> <nowa nazwa pliku>\fR
.TP
\fBnewdoc\fR \fI<stary plik> <nowa nazwa pliku>\fR
.PD 1
Wszystkie powyższe funkcje działają analogicznie jak funkcje do*, tylko
pracują z jednym plikiem i jest on instalowany pod nazwą \fI[nowa nazwa pliku]\fR.
.SH "ZGŁASZANIE BŁĘDÓW"
Błędy zgłaszać należy na stronie http://bugs.gentoo.org/
.SH "AUTORZY"
.nf
Achim Gottinger <achim@gentoo.org>
Mark Guertin <gerk@gentoo.org>
Nicholas Jones <carpaski@gentoo.org>
Mike Frysinger <vapier@gentoo.org>
.fi
.SH "PLIKI"
.TP
Skrypt \fI/usr/sbin/ebuild.sh\fR.
.TP
Aplikacje pomocnicze w katalogu \fI/usr/lib/portage/bin\fR.
.TP
\fB/etc/make.conf\fR 
Zawiera zmienne, wykorzystywane w procesie budowania. Nadpisuje zmienne
zawarte w pliku make.defaults.
.TP
\fB/etc/make.globals\fR
Definiuje domyślne wartości zmiennych wykorzystywanych w procesie budowania.
Edytować należy wyłącznie plik \fI/etc/make.conf\fR.
.SH "ZOBACZ TAKŻE"
.BR ebuild (1),
.BR make.conf (5)
.SH TŁUMACZENIE
Kuba Bożanowski <jbozanowski@gmail.com>
.br 
Polski projekt tłumaczenia manuali Gentoo
.br 
http://gentoo.org/~rane/tlumaczenie-manuali.html
