<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- Orig revision: 1.31 -->
<!-- Translator: veng <veng@wp.pl> -->
<!-- Title: Przygotowanie Plików Instalacyjnych Gentoo -->
<!-- Status: Ukończono -->

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /cvsroot/gentoo-doc-pl/trans/translated/handbook/hb-install-stage.xml,v 1.2 2004/01/15 19:00:33 veng Exp $ -->

<sections>
<section>
<title>Wybór właściwego pliku Stage</title>
<body>

<p>
Kiedy prosiliśmy Cię o wybór medium instalacyjnego (LiveCD, istniejącej dystrybucji
itp) wyjaśnialiśmy, jakie są plusy i minusy każdej opcji. Z nimi wiązał się dobór pliku
stage: kompilujesz wszystko (<e>stage1</e>), pomijasz bootstrap (<e>stage2</e>)
czy zaczynasz od prekompilowanego systemu (<e>stage3</e>)?
</p>

<p>
W zależności od użytego do instalacji medium, jedni mają już decyzje za sobą,
innym zadamy kolejne pytania. Teraz nadeszła pora wykorzystania
wybranego pliku stage.
</p>

<p>
Dwie kolejne części wyjaśniają jak zainstalować stage odpowiadający Twoim
preferencjom. Domyślnie pobieramy ten plik z Internetu, lecz 
także może się on znajdować na niektórych LiveCD.
</p>

<p>
Jeśli masz działające połaczenie z Internetem, lepiej będzie użyć opcji domyślnej.
W przeciwnym przypadku lub jeżeli instalujesz z wykorzystaniem GRP (pakietów
prekompilowanych), musisz wybrać alternatywę.
</p>

<ul>
<li><uri link="#doc_chap2">Domyślnie: Pobieranie z Internetu</uri></li>
<li><uri link="#doc_chap3">Alternatywnie: Wykorzystanie Stage z LiveCD</uri></li>
</ul>

</body>
</section>
<section>
<title>Domyślnie: Pobieranie z Internetu</title>
<subsection>
<title>Pobieranie tarballa Stage</title>
<body>

<p>
Przejdź do punktu montowania systemu plików Gentoo
(prawdopodobnie <path>/mnt/gentoo</path>):
</p>

<pre caption="Przechodzenie do punktu montowania systemu plików Gentoo">
# <i>cd /mnt/gentoo</i>
</pre>

<p>
W zależności od medium instalacyjnego masz pod ręką kilka narzędzi,
za pomocą których możesz ściągnąć stage. Jeśli posiadasz program
<c>lynx</c>, od razu możesz przejść pod adres
<uri link="/main/en/mirrors.xml">Listy mirrorów Gentoo</uri>
i wybrać serwer najbliżej siebie. Wejdź w katalog <path>releases/</path>,
następnie w odpowiadający architekturze Twojego komputera (na przykład
<path>x86/</path>) i wersji Gentoo (<path>1.4/</path>) by zakończyć
w katalogu <path>stages/</path>. Powinieneś widzieć dostępne dla Twojej
architektury wersje plików stage. Wybierz jeden i naciśnij <c>D</c> aby rozpocząć
pobieranie. Kiedy skończysz, klawiszem <c>Q</c> zamknij przeglądarkę.
</p>

<pre caption="Przeglądanie listy serwerów zwierciadlanych za pomocą lynxa">
# <i>lynx http://www.gentoo.org/main/en/mirrors.xml</i>
</pre>

<p>
Jeśli nie masz programu <c>lynx</c>, powinieneś mieć do dyspozycji <c>links2</c>.
<c>links2</c> ma więcej możliwości niż <c>lynx</c>, ale ma też mankamenty. Jednym
z nich jest to, iż nie używa uprzednio zadeklarowanych zmiennych określających proxy.
Jeśli używasz proxy, wpisz <c>links2 -http-proxy serwer.proxy.com:8080</c>.
Od tego miejsca dalsze kroki są takie same jak w przypadku <c>lynxa</c>.
</p>

<pre caption="Przeglądanie listy serwerów zwierciadlanych za pomocą links2">
<comment>(Bez proxy:)</comment>   # <i>links2 http://www.gentoo.org/main/en/mirrors.xml</i>
<comment>(Z proxy:)</comment>      # <i>links2 -http-proxy serwer.proxy.com:8080 http://www.gentoo.org/main/en/mirrors.xml</i>
</pre>

</body>
</subsection>
<subsection>
<title>Rozpakowanie tarballa Stage</title>
<body>

<p>
Teraz wypakuj pobrany plik stage. Do tego zadania
GNU <c>tar</c> będzie najlepszym narzędziem:
</p>

<pre caption="Wypakowanie stage">
# <i>tar -xvjpf stage?-*.tar.bz2</i>
</pre>

<p>
Upewnij się, że użyłeś tych samych przełączników (<c>-xvjpf</c>). Opcja <c>x</c> oznacza
<e>wypakuj</e>, <c>v</c> to <e>wyświetl</e> (no dobra, to jest opcjonalne),
<c>j</c> służy <e>dekompresji archiwum bzip2</e>, <c>p</c> to <e>zachowuj
uprawnienia</e>, natomiast <c>f</c> podkreśla, że chcemy rozpakować to, co czytamy z pliku, a nie
ze standardowego wejścia.
</p>

<p>
Gotowe? W porządku, możesz przejść do następnego paragrafu <uri
link="#doc_chap4">Konfiguracja opcji kompilacji</uri>.
</p>

</body>
</subsection>
</section>
<section>
<title>Alternatywnie: Wykorzystanie Stage z LiveCD</title>
<subsection>
<title>Rozpakowanie tarballa Stage</title>
<body>

<p>
Pliki stage umieszczone są na CD w katalogu <path>/mnt/cdrom/stages</path>.
Aby obejrzeć ich spis użyj <c>ls</c> :
</p>

<pre caption="Lista dostępnych wersji stage">
# <i>ls /mnt/cdrom/stages</i>
</pre>

<p>
Jeśli system zgłasza błąd, może musisz wpierw zamontować CD-ROM:
</p>

<pre caption="Montowanie CD-ROM">
# <i>ls /mnt/cdrom/stages</i>
ls: /mnt/cdrom/stages: No such file or directory
# <i>mount /dev/cdroms/cdrom0 /mnt/cdrom</i>
# <i>ls /mnt/cdrom/stages</i>
</pre>

<p>
Teraz przejdź do punktu montowania Gentoo (zwykle <path>/mnt/gentoo</path>):
</p>

<pre caption="Zmiana katalogu na /mnt/gentoo">
# <i>cd /mnt/gentoo</i>
</pre>

<p>
Następnie wypakujemy wybrany tarball. Użyjemy do tego celu GNU <c>tar</c>.
Upewnij się, że używasz takich samych przełączników (<c>-xvjpf</c>)!
W kolejnym przykładzie wykorzystujemy plik <path>stage3-20031011.tar.bz2</path>.
Nie zapomnij zamienić jego nazwy na prawidłową dla Ciebie.
</p>

<pre caption="Wypakowanie tarballa stage">
# <i>tar -xvjpf /mnt/cdrom/stages/stage3-20031011.tar.bz2</i>
</pre>

</body>
</subsection>
<subsection>
<title>Instalacja migawki Portage i źródeł</title>
<body>

<p>
Na LiveCD znajduje się migawka Portage. Skoro czytasz ten tekst, możemy bezpiecznie założyć,
że używasz tej płyty. Przejrzyj katalog <path>/mnt/cdrom/snapshots/</path> i zobacz,
co tam dla Ciebie przygotowaliśmy:
</p>

<pre caption="Sprawdzanie zawartości /mnt/cdrom/snapshots">
# <i>ls /mnt/cdrom/snapshots</i>
</pre>

<p>
Teraz wypakuj migawkę używając polecenia o niżej podanej składni. Kolejny raz
upewnij się, że przekazujesz właściwe opcje do programu <c>tar</c>. Zatem, <c>-C</c>
występuje z wielką literą <c>C</c>, a nie <c>c</c>. W tym przykładzie nasz plik
zwie się <path>portage-20031011.tar.bz2</path>. Zamiast tego wpisz nazwę pliku,
który posiadasz.
</p>

<pre caption="Rozpakowanie migawki Portage">
# <i>tar -xvjf /mnt/cdrom/snapshots/portage-20031011.tar.bz2 -C /mnt/gentoo/usr</i>
</pre>

<p>
Musisz także skopiować źródła programów dostępne na płycie.
</p>

<pre caption="Kopiowanie kodu źródłowego">
# <i>mkdir /mnt/gentoo/usr/portage/distfiles</i>
# <i>cp /mnt/cdrom/distfiles/* /mnt/gentoo/usr/portage/distfiles/</i>
</pre>

<p>
Jeśli chcesz wykorzystać GRP (paczki binarne), czytaj dalej. W przeciwnym przypadku przejdź do
<uri link="#doc_chap4">Konfiguracji opcji kompilacji</uri>.
</p>

</body>
</subsection>
<subsection>
<title>Opcjonalnie: Przygotowanie GRP</title>
<body>

<p>
Jeżeli zamierzasz instalować Gentoo używająć GRP (prekompilowanych pakietów),
musisz skopiować wszystkie paczki z CD na dysk.
</p>

<pre caption="Kopiowanie paczek binarnych">
# <i>mkdir -p /mnt/gentoo/usr/portage/packages/All</i>
# <i>cp /mnt/cdrom/packages/All/* /mnt/gentoo/usr/portage/packages/All/</i>
</pre>

<p>
Teraz przejdź do <uri link="#doc_chap4">Konfiguracji opcji kompilacji</uri>.
</p>

</body>
</subsection>
</section>
<section>
<title>Konfiguracja opcji kompilacji</title>
<subsection>
<title>Wprowadzenie</title>
<body>

<p>
Jest wiele zmiennych wpływających na zachowanie Gentoo, które możesz ustawić.
Możesz je wprowadzać jako zmienne środowiskowe (poprzez <c>export</c>),
ale wtedy nie zostaną zapisane. Portage do zachowywania konfiguracji używa
pliku konfiguracyjnego <path>/etc/make.conf</path>. Teraz zabieramy się do jego edycji.
</p>

<note>
Opatrzona komentarzami lista wszystkich możliwych zmiennych znajduje się
w pliku <path>/mnt/gentoo/etc/make.conf(.example)</path>. By zakończyć
instalację sukcesem, musisz wyedytować tylko te spośród nich, które
wyszczególniliśmy poniżej.
</note>

<p>
Odpal swój ulubiony edytor (w naszym przewodniku używamy <c>nano</c>),
którym wprowadzisz omawiane nieco dalej opcje optymalizacji.
</p>

<pre caption="Edytowanie /etc/make.conf">
# <i>nano -w /mnt/gentoo/etc/make.conf</i>
</pre>

<p>
Jak już prawdopodobnie zauważyłeś, plik <path>make.conf(.example)</path>
ma charakterystyczną strukturę: linie z komentarzem rozpoczyna "#", linie zawierające
zmienne używają składni <c>ZMIENNA="zawartość"</c>. Kilka z tych zmiennych
zostało przedyskutowanych poniżej.
</p>

</body>
</subsection>
<subsection>
<title>CHOST</title>
<body>

<warn>
Mimo, iż może to zainteresować tych, którzy nie korzystają ze stage1, <e>nie</e>
powinni oni zmieniać ustawienia <c>CHOST</c> w <path>make.conf</path>. Dokonanie
tego może uczynić system niezdatnym do użytku. Powtarzamy: tę zmienną modyfikuj tylko,
gdy instalujesz używając <e>stage1</e>.
</warn>

<p>
Zmienna <c>CHOST</c> definiuje architekturę, pod którą za pomocą <c>gcc</c> będą
kompilowane programy. Możliwe jej wartości:
</p>

<table>
<tr>
  <th>Architektura</th>
  <th>Podarchitektura</th>
  <th>Ustawienia CHOST</th>
</tr>
<tr>
  <ti>x86</ti>
  <ti>i386</ti>
  <ti>i386-pc-linux-gnu</ti>
</tr>
<tr>
  <ti>x86</ti>
  <ti>i486</ti>
  <ti>i486-pc-linux-gnu</ti>
</tr>
<tr>
  <ti>x86</ti>
  <ti>i586</ti>
  <ti>i586-pc-linux-gnu</ti>
</tr>
<tr>
  <ti>x86</ti>
  <ti>i686 i wyżej (także athlon)</ti>
  <ti>i686-pc-linux-gnu</ti>
</tr>
<tr>
  <ti>alpha</ti>
  <ti></ti>
  <ti>alpha-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>ppc</ti>
  <ti></ti>
  <ti>powerpc-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>sparc</ti>
  <ti></ti>
  <ti>sparc-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>hppa</ti>
  <ti>(uniwersalne)</ti>
  <ti>hppa-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>hppa</ti>
  <ti>pa7000</ti>
  <ti>hppa1.1-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>hppa</ti>
  <ti>pa8000 i wyżej</ti>
  <ti>hppa2.0-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>mips</ti>
  <ti></ti>
  <ti>mips-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>amd64</ti>
  <ti></ti>
  <ti>x86_64-pc-linux-gnu</ti>
</tr>
</table>

</body>
</subsection>
<subsection>
<title>CFLAGS i CXXFLAGS</title>
<body>

<p>
Zmienne <c>CFLAGS</c> i <c>CXXFLAGS</c> definiują flagi optymalizujące
używane odpowiednio przez kompilator <c>gcc</c> C i C++. Choć generalnie
określamy ich wartości tutaj, maksimum wydajności osiągniesz dopasowując
je do każdego programu z osobna. Jest tak dlatego, że programy znacząco
różnią się między sobą.
</p>

<p>
W <path>make.conf</path> powinieneś zdefiniować flagi optymalizacji co do
których jesteś przekonany, że <e>w głównej mierze</e> poprawią czas reakcji
systemu. Nie przypisuj pod tę zmienną ustawień eksperymentalnych; przesada
w optymalizacji może spowodować, że programy zaczną źle funkcjonować
(nagle przerywać działanie, lub nawet gorzej, wcale nie działać).
</p>

<p>
Nie będziemy tłumaczyć znaczenia wszystkich możliwych opcji optymalizacji.
Jeśli chcesz je poznać, przeczytaj
<uri link="http://www.gnu.org/software/gcc/onlinedocs/">Podręcznik Online GNU
</uri> lub stronę info <c>gcc</c> (<c>info gcc</c> -- działa tylko na systemach
linuksowych). Plik <path>make.conf</path> sam zawiera dużo informacji i przykładów
 - nie zapomnij przeczytać także i jego.
</p>

<p>
Pierwszym ustawieniem jest flaga <c>-march=</c> która określa docelową
architekturę. Możliwe jej wartości są opisane jako komentarze w
<path>make.conf</path>. Na przykład, architektura x86 Athlon XP :
</p>

<pre caption="Ustawienie GCC march">
-march=athlon-xp
</pre>

<p>
Drugim jest flaga <c>-O</c>, która określa klasę optymalizacji <c>gcc</c>.
Dostępne klasy to <c>s</c> (optymalizacja rozmiaru),
<c>0</c> (brak optymalizacji), <c>1</c>, <c>2</c> lub <c>3</c> są coraz
silniej optymalizujące (każda z nich używa tych samych flag, co poprzednia
oraz dodaje własne). Jako przykład posłuży nam klasa optymalizacji 2:
</p>

<pre caption="Ustawienia optymalizacji poprzez GCC">
-O2
</pre>

<p>
Inne popularne flagi optymalizujące to <c>-pipe</c> (gcc używa potoków zamiast
plików tymczasowych w komunikacji między różnymi etapami kompilacji) oraz
<c>-fomit-frame-pointer</c> (w rejestrach nie będą przechowywane wskażniki
ramki dla funkcji, które ich nie wymagają).
</p>

<p>
Kiedy definiujesz <c>CFLAGS</c> i <c>CXXFLAGS</c>, powinieneś łączyć kilka
flag optymalizacji, jak w następującym przykładzie:
</p>

<pre caption="Definiowanie zmiennych CFLAGS i CXXFLAGS">
CFLAGS="-march=athlon-xp -pipe -O2"
CXXFLAGS="${CFLAGS}"                  <comment># Użycie tych samych ustawień dla obu zmiennych</comment>
</pre>

</body>
</subsection>
<subsection>
<title>MAKEOPTS</title>
<body>

<p>
Za pomocą <c>MAKEOPTS</c> definiujesz, ile może być przeprowadzanych równolegle
kompilacji podczas przygotowywania pakietu do instalacji. Sugerowaną liczbą jest ilość
procesorów w systemie plus jeden.
</p>

<pre caption="MAKEOPTS dla przeciętnego systemu 1-procesorowego">
MAKEOPTS="-j2"
</pre>

</body>
</subsection>
<subsection>
<title>Gotowi, do biegu, start!</title>
<body>

<p>
Popraw wedle życzenia <path>/mnt/gentoo/etc/make.conf</path> i zapisz go.
Teraz jesteś przygotowany na  <uri link="?part=1&amp;chap=6">
Instalację systemu podstawowego </uri>.
</p>

</body>
</subsection>
</section>
</sections>
